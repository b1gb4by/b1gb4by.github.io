[{"content":"先日、既存のCloud Functionsを第1世代から第2世代へ移行する機会がありました。 その際、IAM設定が想像以上に変わっていたことに驚き、また、カスタムサービスアカウントの設定方法も第1世代とは異なっていました。\nこの記事では、実際の移行作業で得た技術的な気づきと、正常に動作させるまでに必要だった設定を共有します。\nこの記事の対象読者 Google CloudでCloud Functionsを使用している方 第1世代から第2世代への移行を検討・実施している方 TerraformでCloud Functionsを管理している方 移行時に最初に直面した問題：IAMリソースタイプの変更 第2世代への移行で最初につまずいたのは、TerraformのIAMリソースが全く異なることでした。\n第1世代での設定（従来の方法） # 第1世代ではこう書いていた resource \u0026#34;google_cloudfunctions_function_iam_member\u0026#34; \u0026#34;invoker\u0026#34; { project = var.project_id region = \u0026#34;asia-northeast1\u0026#34; cloud_function = \u0026#34;my-function\u0026#34; role = \u0026#34;roles/cloudfunctions.invoker\u0026#34; member = \u0026#34;serviceAccount:${var.service_account_email}\u0026#34; } 第2世代で必要な設定（Cloud Runリソースを使用） # 第2世代ではCloud Runのリソースを使う必要がある resource \u0026#34;google_cloud_run_service_iam_member\u0026#34; \u0026#34;invoker\u0026#34; { project = var.project_id location = \u0026#34;asia-northeast1\u0026#34; service = \u0026#34;my-function\u0026#34; # 関数名がそのままサービス名になる role = \u0026#34;roles/run.invoker\u0026#34; # ロールも変わっている！ member = \u0026#34;serviceAccount:${var.service_account_email}\u0026#34; } この変更の理由は、第2世代のCloud FunctionsがCloud Runベースで動作するようになったためです1。 つまり、内部的にはCloud Runサービスとして扱われているということです。\n第1世代と第2世代のロールの違い（ここが重要！） 移行作業で最も苦戦したのが、必要なロールが大きく変わっていたことでした。 Google Cloudの公式ドキュメントを調査した結果、以下の違いが明確になりました：\nデプロイ時に必要なロール 第1世代：\nresource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_permissions_gen1\u0026#34; { for_each = toset([ \u0026#34;roles/cloudfunctions.developer\u0026#34;, # Cloud Functions開発者 \u0026#34;roles/iam.serviceAccountUser\u0026#34;, # サービスアカウント使用権限 ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } 第2世代2：\nresource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_permissions_gen2\u0026#34; { for_each = toset([ \u0026#34;roles/cloudfunctions.developer\u0026#34;, # Cloud Functions開発者（まだ必要） \u0026#34;roles/run.admin\u0026#34;, # Cloud Run管理者権限が追加で必要！ \u0026#34;roles/iam.serviceAccountUser\u0026#34;, # サービスアカウント使用権限 \u0026#34;roles/eventarc.admin\u0026#34;, # Pub/Subトリガーを使う場合は必須 \u0026#34;roles/artifactregistry.reader\u0026#34;, # コンテナイメージへのアクセス ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } 実行時に必要なロール 第1世代：\nroles/cloudfunctions.invoker - 関数を呼び出すため 第2世代3：\nroles/run.invoker - Cloud Runサービスとして呼び出すため4 roles/eventarc.eventReceiver - Pub/Sub以外のEventarcイベントを受信する場合5 この違いを理解せずに移行すると、「権限があるはずなのに動かない」という状況に陥ります。 特にroles/run.adminが必要なことは、公式ドキュメントの「Cloud Functions第2世代はCloud Runインフラストラクチャ上で動作する」という記述6を理解していないと気づきにくいポイントでした。\nサービスアカウントの変更点 さらに重要な変更点として、デフォルトのランタイムサービスアカウントが変更されています7：\n第1世代：\nランタイム: PROJECT_ID@appspot.gserviceaccount.com（App Engineデフォルト） 第2世代：\nランタイム: PROJECT_NUMBER-compute@developer.gserviceaccount.com（Compute Engineデフォルト） カスタムサービスアカウントの実装で学んだこと デフォルトサービスアカウントの課題 デフォルトではPROJECT_NUMBER-compute@developer.gserviceaccount.comが使用されますが、このアカウントはEditor権限を持っています8。セキュリティの観点から、専用のサービスアカウントを作成することにしました。\n実際に動作した構成 以下は、実際のプロジェクトで正常に動作した構成を汎用化したものです：\n# Cloud Build用サービスアカウント（デプロイを実行する） resource \u0026#34;google_service_account\u0026#34; \u0026#34;cloud_build\u0026#34; { account_id = \u0026#34;cloud-build-deployer\u0026#34; project = var.project_id display_name = \u0026#34;Cloud Build Deployer\u0026#34; description = \u0026#34;Cloud Functionsのデプロイを実行するサービスアカウント\u0026#34; } # Cloud Functions実行用サービスアカウント resource \u0026#34;google_service_account\u0026#34; \u0026#34;cloud_functions\u0026#34; { account_id = \u0026#34;cf-my-function\u0026#34; project = var.project_id display_name = \u0026#34;Cloud Functions Runtime\u0026#34; description = \u0026#34;Cloud Functions実行時に使用するサービスアカウント\u0026#34; } 必要な権限設定 ここが重要なポイントです。Cloud BuildがCloud Functionsのサービスアカウントを使用してデプロイを実行するため、roles/iam.serviceAccountUser権限の付与が必要でした9：\n# Cloud BuildがFunctionsのサービスアカウントを使用するための権限 resource \u0026#34;google_service_account_iam_member\u0026#34; \u0026#34;cloud_build_act_as\u0026#34; { service_account_id = google_service_account.cloud_functions.name role = \u0026#34;roles/iam.serviceAccountUser\u0026#34; member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } この権限により、Cloud Buildサービスアカウントが、Cloud Functions用のサービスアカウントをCloud Functionsの実行アイデンティティとして指定できるようになります。この設定がないと、デプロイ時に権限エラーが発生します。\nPub/Subトリガーで遭遇した特殊なケース Pub/Subサービスアカウントの形式 Pub/Subトリガーを使用する場合、以下の設定が必要でした：\nresource \u0026#34;google_cloud_run_service_iam_member\u0026#34; \u0026#34;pubsub_invoker\u0026#34; { project = var.project_id location = \u0026#34;asia-northeast1\u0026#34; service = \u0026#34;my-function\u0026#34; role = \u0026#34;roles/run.invoker\u0026#34; member = \u0026#34;serviceAccount:service-${var.project_number}@gcp-sa-pubsub.iam.gserviceaccount.com\u0026#34; } ここで注意すべきは、PROJECT_IDではなくPROJECT_NUMBERを使用する点です。最初はこれに気づかず、なぜ権限エラーが出るのか悩みました。\nなぜPub/SubのIAM設定が複雑になったのか 調査したところ、第2世代ではPub/SubトリガーがEventarcを介して動作するようになったためでした10。公式ドキュメントによると、Eventarcトリガーを作成する際にはroles/eventarc.admin権限が必要で11、トリガーサービスアカウントにはroles/run.invoker権限が必要です12。\nCloud Build経由でデプロイする場合の追加要件 公式ドキュメントを確認したところ、Cloud Build経由でGen2関数をデプロイする場合、以下の追加権限も必要でした13：\n# Cloud Buildサービスアカウントに追加で必要な権限 resource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_additional\u0026#34; { for_each = toset([ \u0026#34;roles/storage.objectViewer\u0026#34;, # ソースコードへのアクセス \u0026#34;roles/logging.logWriter\u0026#34;, # ビルドログの書き込み ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } Cloud Buildでのデプロイ設定 実際に使用したCloud Build設定（汎用化済み）：\nsteps: - id: deploy cloud function name: gcr.io/google.com/cloudsdktool/cloud-sdk entrypoint: \u0026#39;bash\u0026#39; args: - \u0026#39;-c\u0026#39; - | gcloud functions deploy my-function \\ --gen2 \\ --region=asia-northeast1 \\ --trigger-topic=my-topic \\ --runtime=nodejs20 \\ --entry-point=main \\ --service-account=${_CF_SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com --gen2フラグと--service-accountオプションが重要です。\nSecret Managerとの統合（追加の発見） 環境変数ではなくSecret Managerを使う利点 移行作業中に、Secret Managerとの統合が第2世代でより使いやすくなっていることに気づきました2。\n# Secret Managerへのアクセス権限 resource \u0026#34;google_secret_manager_secret_iam_member\u0026#34; \u0026#34;function_secrets\u0026#34; { for_each = toset([ \u0026#34;API_KEY\u0026#34;, \u0026#34;DATABASE_PASSWORD\u0026#34;, ]) project = var.project_id secret_id = each.value role = \u0026#34;roles/secretmanager.secretAccessor\u0026#34; member = \u0026#34;serviceAccount:${google_service_account.cloud_functions.email}\u0026#34; } デプロイ時の設定：\n--set-secrets=\u0026#34;API_KEY=API_KEY:latest\u0026#34; \\ --set-secrets=\u0026#34;DB_PASSWORD=DATABASE_PASSWORD:latest\u0026#34; これにより、環境変数に直接機密情報を設定する必要がなくなりました。\n移行作業で得た教訓 1. 関数名とCloud Runサービス名の関係 第2世代では、デプロイした関数名がそのままCloud Runサービス名になります。これを理解していないと、IAM設定時に混乱します。\n2. PROJECT_NUMBERとPROJECT_IDの使い分け 特にPub/Subのサービスアカウントでは、必ずPROJECT_NUMBERを使用する必要があります：\n正しい: service-123456789@gcp-sa-pubsub.iam.gserviceaccount.com 間違い: service-my-project-id@gcp-sa-pubsub.iam.gserviceaccount.com 3. 権限エラーのデバッグ方法 権限エラーが発生した場合、Cloud Loggingで以下を確認すると原因が特定しやすいです：\nどのサービスアカウントが使用されているか どのロールが不足しているか リソース名（特にCloud Runサービス名）が正しいか まとめ Cloud Functions第2世代への移行では、以下の点で大きな変更がありました：\nIAMリソースタイプの変更：google_cloudfunctions_function_iam_memberからgoogle_cloud_run_service_iam_memberへ ロールの変更：roles/cloudfunctions.invokerからroles/run.invokerへ 追加で必要なロール：roles/run.admin、roles/eventarc.admin、roles/artifactregistry.reader Pub/Subトリガーの複雑化：Eventarc経由になったことによる追加設定 デフォルトサービスアカウントの変更：App EngineデフォルトからCompute Engineデフォルトへ カスタムサービスアカウントの権限：roles/iam.serviceAccountUserの必要性 これらの変更は、第2世代がCloud Runベースになったことに起因しています。 公式ドキュメントにも「Cloud Functions第2世代はCloud Runインフラストラクチャ上で動作する」と明記されており14、この根本的なアーキテクチャの変更が、IAM設定の違いにつながっています。\n移行作業を行う際は、これらの違いを理解しておくと、スムーズに進められるはずです。 特に、Cloud Run関連の権限が必要になることは、事前に知っておくべき重要なポイントです。\nこの記事が、同じような移行作業を行う方の参考になれば幸いです。\n参考資料 Compare Cloud Run functions | Cloud Run Documentation Access control with IAM | Cloud Run functions Documentation Function Identity | Cloud Run functions Documentation Terraform Tutorial | Cloud Run functions Documentation Google Cloud Functions is now Cloud Run functions | Google Cloud Blog\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCloud Functions IAM Roles | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAccess control with IAM | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n第2世代のCloud FunctionsはCloud Run上で動作するため、roles/cloudfunctions.invokerの代わりにroles/run.invokerが必要です\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRoles and permissions for Cloud Run targets | Eventarc Standard\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCompare Cloud Run functions | Cloud Run Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFunction Identity | Cloud Functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBest practices for using service accounts | IAM Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUse service account impersonation | Authentication\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCreate triggers from Pub/Sub events | Cloud Run Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRoles and permissions for Cloud Run targets | Eventarc Standard\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPub/SubサービスエージェントがCloud Run関数を呼び出すために必要な権限です\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBuild process overview | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nGoogle Cloud Functions is now Cloud Run functions | Google Cloud Blog\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://b1gb4by.github.io/ja/posts/2025-08-04-terraform-custom-sa-cloud-functions/","summary":"\u003cp\u003e先日、既存のCloud Functionsを第1世代から第2世代へ移行する機会がありました。\nその際、IAM設定が想像以上に変わっていたことに驚き、また、カスタムサービスアカウントの設定方法も第1世代とは異なっていました。\u003c/p\u003e\n\u003cp\u003eこの記事では、実際の移行作業で得た技術的な気づきと、正常に動作させるまでに必要だった設定を共有します。\u003c/p\u003e","title":"Cloud Functions第2世代移行で直面したIAM設定の変更点とカスタムサービスアカウントの実装"},{"content":"基本情報 氏名・生年月日 項目 内容 氏名 岡本泰典 (オカモト タイスケ) 生年月日 1996/12/02 学歴・職歴 年 月 学歴・職歴 2012 4 兵庫県立伊丹高等学校 普通科 入学 2015 3 兵庫県立伊丹高等学校 普通科 卒業 2015 4 大阪工業大学 情報科学部 情報ネットワーク学科 入学 2019 3 大阪工業大学 情報科学部 情報ネットワーク学科 卒業 2019 4 株式会社ビデオマーケット 入社 2021 1 株式会社ビデオマーケット 退社 2021 1 モノック株式会社 入社 2021 8 モノック株式会社 退社 2021 9 株式会社IDC フロンティア 入社 2025 6 株式会社IDC フロンティア 退社 2025 7 株式会社プレイド 入社 技術スタック カテゴリ 技術スタック Programming / Library etc. Go / Python / Java / PHP / C / etc Code Management GitHub / GitLab / Bitbucket Infrastructure Google Cloud / AWS / IDCF Cloud IaaS CloudStack / vSphere Database/KVS MySQL / Redis / PostgreSQL / BigQuery / etc Infrastructure as Code Ansible / Terraform / etc Orchestration \u0026amp; Management Kubernetes / Docker / Rancher CI/CD CircleCI / Cloud Build / GitHub Actions / ArgoCD / Fleet Container Registry Harbor Observability Splunk / Grafana / Prometheus / OpenTelemetry / NeuVector Service Mesh Istio / Linkerd 職務内容 株式会社プレイド ① Developer Experience \u0026amp; Performance Engineer 2025/07 - 現在\n開発基盤・アーキテクチャ設計\nWIP 開発者体験・生産性向上\nWIP 技術標準化・モダナイゼーション\nWIP 株式会社IDC フロンティア ① コンテナ・Kubernetes技術エバンジェリスト/社内教育リーダー 2023/01 - 2025/06\n社内教育プログラムの企画・実施\n3ヶ月間のコンテナ・Kubernetes学習プログラムを設計・実施 満足度90%以上を維持し、エンジニアの技術力向上に貢献 自社システムの技術移行支援\nコンテナ化およびKubernetes環境への移行をリード 移行に伴う技術的課題の解決と最適化を担当 社内外の技術サポート提供\nSE・営業チームへの技術支援 クライアントへのコンテナ・Kubernetes導入支援と技術サポート実施 ② Kubernetes as a Service (KaaS)開発 2022/09 - 2025/06\nCloudStackでのKubernetes統合開発\nCSI Driver、Cloud Controller Manager、Ingress Controllerの調査・研究 自社セキュリティ要件に合わせた独自Kubernetes実装 Kubernetesバージョンアップに伴う内部コンポーネントの継続的改善 独自Kubernetesコンポーネントの開発\naddon-managerの内製による自動アップデート機能の提供 Migration機能やCluster Autoscalerの独自実装 Rancher基盤のGUI提供に合わせたサービス開発 マルチプラットフォーム対応とCI/CD整備\nプライベートクラウド(vSphere)上でのKubernetes構築 多数のKubernetesバージョン管理のためのCI/CD環境整備 変更差分検出スクリプトの実装によるマニフェスト管理の効率化 モノック株式会社 ① 商品発注管理システムの開発/運用 2021/02 - 2021/08\n自社商品発注管理システムの開発\n手動プロセスの自動化による業務効率の大幅向上 GoによるAPI開発（標準パッケージのみを使用） ECプラットフォーム(Shopify)との連携機能実装 クラウドネイティブな運用環境の構築\nGoogle Cloud上でのサービス完結型アーキテクチャ設計 CloudBuild + CloudRunを活用したCI/CD環境の構築 開発プロセスの最適化と成果\n単独開発者として迅速なシステム提供を実現 業務効率の大幅向上とヒューマンエラーの削減を達成 開発サイクルの加速化による継続的改善の実現 ② 国際EC連携システムの開発/運用 2021/02 - 2021/08\n中国・韓国ECサイトとの連携システム開発\nGo言語を使用したAPI、バッチ処理、Webhook実装 Goroutineを活用し、1日2~3万件の高速な商品登録・更新処理を実現 SlackとのWebhook連携によるエラー検知システムの構築 大規模データ処理と可視化\nGoroutine内でのレスポンス整形とBigQueryへのデータ登録最適化 非エンジニアでも利用可能なGUIによる商品情報の可視化実現 効率的なシステム開発と運用スキルの獲得\n国際的なECプラットフォーム連携における実践的経験 柔軟な発想と問題解決能力の向上 チーム協力を通じた目標達成能力の強化 株式会社ビデオマーケット ① 配信サービス内の再生基盤のリニューアル 2019/10 ~ 2021/01\n配信サービス再生基盤のリニューアル\nPHPからGo言語へのリプレイス実施 モノリス構造からKubernetesを採用したマイクロサービス化を実現 プロジェクト主力として全体的な開発をリード Kubernetes環境の構築と最適化\nKustomizeによるマニフェスト管理コストの削減 サービスメッシュ(Istio)を活用したセキュアな通信の実現 Grafana、Prometheusによるモニタリング、Locustによる負荷試験の導入 技術的挑戦と成長\nGo言語とKubernetesの学習から実践的な適用まで短期間で実現 多様なクラウドネイティブツールの導入と運用経験の獲得 既存システムの課題解決と新技術導入による改善の両立 ② 動画配信のDRM実装エンジニア 2020/07 - 2020/10\nマルチDRMソリューションの設計と実装\nWidevine、PlayReady、FairPlayに対応したDRMシステムの構築 クラウドベースのDRMライセンスサーバーの開発と運用 コンテンツ暗号化ワークフローの最適化による処理効率の向上 セキュアな視聴環境の確立\nクライアントサイドでのDRM実装（Web、iOS、Android） トークンベースの認証システムとの連携によるアクセス制御強化 ストリーミングプロトコル（HLS、DASH）とDRMの統合 パフォーマンスとユーザー体験の最適化\nCDNとDRMの連携によるグローバルな配信最適化 オフライン再生機能の実装によるモバイルユーザー体験の向上 分析ツールの導入によるDRM関連問題の迅速な特定と解決 副業 インフラエンジニア - 株式会社Geears 2024/12 - 2025/06\nAWSインフラ構築・運用\nS3、ECS、ECR、VPC、RDS、ElastiCache等を活用したクラウドインフラの設計・構築 IAMを用いたセキュアなアクセス制御の実装 CloudWatchによる監視体制の構築とパフォーマンス最適化 Secrets Managerを活用した機密情報の安全な管理 データ分析基盤の構築\nRedshift Spectrumの構築・運用・保守を担当 大規模データ分析のためのデータレイク構築と最適化 クエリパフォーマンスの改善とコスト最適化の実現 コンテナ化とCI/CD環境の整備\nECSを用いたアプリケーションのコンテナ化とオーケストレーション GitHub Actionsを活用したCI/CDパイプラインの構築 自動化によるデプロイメントプロセスの効率化と品質向上 技術コーチ、およびアドバイザーとしての技術支援 - 株式会社Relie 2021/09 - 2024/10\n友人が起業した会社のサービス開発のバックエンド、インフラ全般をサポート また、現在では技術コーチとして社内のエンジニアの育成、および教育も実施 エンジニア育成や教育では基礎的な知識から情報リテラシーなど、非エンジニア向けの学習コンテンツも企画、作成し、提供 コンテナ・Kuberentesの導入しているFinTech企業へは、技術支援として、インフラ設計や運用のアドバイスなどを実施 独自メディア再生プレイヤーの設計、実装 - 株式会社GiGs 2019/08 - 2019/09\n友人から起業した企業のサービスの開発の一部を開発・サポートを行いました 音声プラットフォームで、メディアを再生する際の独自のWeb再生プレイヤーを設計、実装、テストまでを一貫して担当 LPサイトの作成 - 株式会社ライズアース 2017/07 - 2017/10\n友人から紹介を受けたスタートアップ企業のLPの作成から公開、運用をすべて行いました 主な内容は以下の通りです DNS、ファイアウォール、SSLなどの設定 WordPressの導入 サイトデザインの設計、実装 その他の活動 テックカンファレンスの運営 日本最大級のクラウドネイティブ・テックカンファレンスであるCloudNative Daysに2022年より実行委員として参画 Observabilityチームリーダーとしてカンファレンスメトリクスの可視化をするべく従事 2024年からはCo-chairとして、カンファレンス全体の運営を牽引 またに、同年にGrafana Meetup JapanのCo-Organizerにも就任し、オープンソースプロジェクトGrafanaをはじめとするLGTMスタック（Loki, Grafana, Tempo, Mimir）および関連するソフトウェア（PrometheusやOpenTelemetryなど）を用いたオブザーバビリティの知識、設計、実装、運用の実践を開かれた場で共有し、ビギナーから本番環境での利用まであらゆるユーザー（個人および組織）のレベルアップを支援 DJ, VJとしての活動 2019年から関西でDJ活動をスタートし、2021年からBigBaByとして都内のナイトクラブを中心に活動しています DJとして培った豊富な音楽知識とスキルを活用し、ジャンルにとらわれないVJスタイルで「五感を刺激する」空間を作り上げ、観客を魅了しています 現在は都内のクラブで活動の幅を広げています 各現場で海外アーティストのVJも担当しており、これから注目のVJとして評価されています 出演経験 ナイトクラブ CÉ LA VI Tokyo WARP SHINJUKU WOMB YOKOHAMA COAST garage+ ZEROTOKYO Zouk Tokyo フェスティバル SONIC MANIA 2023 SUMMER SONIC 2024 活動領域のバランス pie title 2025年 活動領域と時間配分 \"本業\" : 50 \"コミュニティ運営\" : 25 \"技術教育・メンタリング\" : 5 \"副業・技術支援\" : 10 \"DJ/VJ活動\" : 10 ","permalink":"https://b1gb4by.github.io/ja/resume/","summary":"\u003ch1 id=\"基本情報\"\u003e基本情報\u003c/h1\u003e\n\u003ch2 id=\"氏名生年月日\"\u003e氏名・生年月日\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e項目\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e内容\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e氏名\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e岡本泰典 (オカモト タイスケ)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e生年月日\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1996/12/02\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"学歴職歴\"\u003e学歴・職歴\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e年\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e月\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e学歴・職歴\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2012\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://dmzcms.hyogo-c.ed.jp/kenita-hs/NC3/\"\u003e兵庫県立伊丹高等学校\u003c/a\u003e 普通科 入学\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2015\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e兵庫県立伊丹高等学校 普通科 卒業\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2015\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://www.oit.ac.jp/is/network/index.html\"\u003e大阪工業大学 情報科学部 情報ネットワーク学科\u003c/a\u003e 入学\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2019\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e大阪工業大学 情報科学部 情報ネットワーク学科 卒業\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2019\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://www.videomarket.co.jp/\"\u003e株式会社ビデオマーケット\u003c/a\u003e 入社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e株式会社ビデオマーケット 退社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://monoc.inc/\"\u003eモノック株式会社\u003c/a\u003e 入社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e8\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eモノック株式会社 退社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e9\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://www.idcf.jp/\"\u003e株式会社IDC フロンティア\u003c/a\u003e 入社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2025\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e6\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e株式会社IDC フロンティア 退社\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2025\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e7\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://plaid.co.jp/\"\u003e株式会社プレイド\u003c/a\u003e 入社\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"技術スタック\"\u003e技術スタック\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eカテゴリ\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e技術スタック\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eProgramming / Library etc.\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGo / Python / Java / PHP / C / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCode Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGitHub / GitLab / Bitbucket\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eInfrastructure\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGoogle Cloud / AWS / IDCF Cloud\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eIaaS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCloudStack / vSphere\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eDatabase/KVS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMySQL / Redis / PostgreSQL / BigQuery / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eInfrastructure as Code\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAnsible / Terraform / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eOrchestration \u0026amp; Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eKubernetes / Docker / Rancher\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCI/CD\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCircleCI / Cloud Build / GitHub Actions / ArgoCD / Fleet\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eContainer Registry\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eHarbor\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eObservability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSplunk / Grafana / Prometheus / OpenTelemetry / NeuVector\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eService Mesh\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eIstio / Linkerd\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"職務内容\"\u003e職務内容\u003c/h1\u003e\n\u003ch2 id=\"株式会社プレイド\"\u003e株式会社プレイド\u003c/h2\u003e\n\u003ch3 id=\"-developer-experience--performance-engineer\"\u003e① Developer Experience \u0026amp; Performance Engineer\u003c/h3\u003e\n\u003cp\u003e2025/07 - 現在\u003c/p\u003e","title":"経歴"},{"content":"個人で使用しているデバイスの詳細情報について説明します.\nLaptop PC Macbook Pro (13-inch, 2019) 項目 内容 CPU Intel Core™ i7-8569U GPU Intel Iris Plus Graphics 655 Memory 16 GB 2133 MHz LPDDR3 OMEN by HP (16-inch, 2023) 項目 内容 CPU Intel Core™ i7-14700HX GPU NVIDIA® GeForce RTX™ 4070 Laptop GPU 12GB GDDR6 Memory 16GB (8GB×2) DDR5-5600MHz Lenovo Legion Pro 7i Gen 9 (16-inch, 2024) 項目 内容 CPU Intel Core™ i9-14900HX GPU NVIDIA® GeForce RTX™ 4080 Laptop GPU 12GB GDDR6 Memory 32GB (16GB*2) DDR5-5600MHz Desktop PC 項目 内容 Motherboard ROG STRIX H370-F GAMING (ASUSTeK COMPUTER INC.) CPU Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz GPU NVIDIA GeForce GTX 1060 6GB (MSI Co., Ltd.) Memory DDR4-2666MHz 8×4GB (Corsair Inc.) Storage(OS) Crucial MX500 500×2GB (Micron Technology, Inc.) Storage Western Digital Blue: 6TB, Green: 3×2TB (Western Digital Corporation) 使用している デスクトップ PC には、様々な OS がインストールされています.\n項目 内容 OS_1 Windows 11 Pro (64bit) OS_2 Manjaro Linux OS_3 Ubuntu 24.04 OS_4 openSUSE Tumbleweed ","permalink":"https://b1gb4by.github.io/ja/posts/2021-09-28-device-configs/","summary":"\u003cp\u003e個人で使用しているデバイスの詳細情報について説明します.\u003c/p\u003e","title":"使用しているデバイスについて"},{"content":"","permalink":"https://b1gb4by.github.io/ja/archives/","summary":"アーカイブ","title":"アーカイブ"},{"content":"","permalink":"https://b1gb4by.github.io/ja/tags/","summary":"","title":"タグ"}]