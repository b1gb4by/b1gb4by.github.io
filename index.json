[{"content":"Recently, I had the opportunity to migrate existing Cloud Functions from 1st generation to 2nd generation. During this process, I was surprised to find that the IAM configuration had changed more than expected, and the setup method for custom service accounts was also different from the 1st generation.\nIn this article, I\u0026rsquo;ll share the technical insights gained from the actual migration work and the configurations required to get everything working properly.\nTarget Audience Those using Cloud Functions on Google Cloud Those considering or implementing migration from 1st to 2nd generation Those managing Cloud Functions with Terraform Initial Problem Encountered: Changes in IAM Resource Types The first stumbling block in migrating to 2nd generation was that the Terraform IAM resources were completely different.\n1st Generation Configuration (Traditional Method) # This is how we wrote it in 1st generation resource \u0026#34;google_cloudfunctions_function_iam_member\u0026#34; \u0026#34;invoker\u0026#34; { project = var.project_id region = \u0026#34;asia-northeast1\u0026#34; cloud_function = \u0026#34;my-function\u0026#34; role = \u0026#34;roles/cloudfunctions.invoker\u0026#34; member = \u0026#34;serviceAccount:${var.service_account_email}\u0026#34; } 2nd Generation Configuration (Using Cloud Run Resources) # In 2nd generation, we need to use Cloud Run resources resource \u0026#34;google_cloud_run_service_iam_member\u0026#34; \u0026#34;invoker\u0026#34; { project = var.project_id location = \u0026#34;asia-northeast1\u0026#34; service = \u0026#34;my-function\u0026#34; # Function name becomes the service name role = \u0026#34;roles/run.invoker\u0026#34; # The role has changed too! member = \u0026#34;serviceAccount:${var.service_account_email}\u0026#34; } The reason for this change is that 2nd generation Cloud Functions now runs on a Cloud Run base1. In other words, it\u0026rsquo;s internally treated as a Cloud Run service.\nDifferences in Roles Between 1st and 2nd Generation (This is Important!) What I struggled with most during the migration was that the required roles had changed significantly. After investigating the official Google Cloud documentation, the following differences became clear:\nRoles Required for Deployment 1st Generation:\nresource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_permissions_gen1\u0026#34; { for_each = toset([ \u0026#34;roles/cloudfunctions.developer\u0026#34;, # Cloud Functions developer \u0026#34;roles/iam.serviceAccountUser\u0026#34;, # Service account usage permission ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } 2nd Generation2:\nresource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_permissions_gen2\u0026#34; { for_each = toset([ \u0026#34;roles/cloudfunctions.developer\u0026#34;, # Cloud Functions developer (still needed) \u0026#34;roles/run.admin\u0026#34;, # Cloud Run admin permission additionally required! \u0026#34;roles/iam.serviceAccountUser\u0026#34;, # Service account usage permission \u0026#34;roles/eventarc.admin\u0026#34;, # Required when using Pub/Sub triggers \u0026#34;roles/artifactregistry.reader\u0026#34;, # Access to container images ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } Roles Required for Execution 1st Generation:\nroles/cloudfunctions.invoker - To invoke the function 2nd Generation3:\nroles/run.invoker - To invoke as a Cloud Run service4 roles/eventarc.eventReceiver - When receiving Eventarc events other than Pub/Sub5 If you migrate without understanding these differences, you\u0026rsquo;ll end up in a situation where \u0026ldquo;it should have permissions but it doesn\u0026rsquo;t work.\u0026rdquo; In particular, the need for roles/run.admin was a point that\u0026rsquo;s hard to notice without understanding the official documentation stating that \u0026ldquo;Cloud Functions 2nd generation runs on Cloud Run infrastructure\u0026rdquo;6.\nService Account Changes Another important change is that the default runtime service account has changed7:\n1st Generation:\nRuntime: PROJECT_ID@appspot.gserviceaccount.com (App Engine default) 2nd Generation:\nRuntime: PROJECT_NUMBER-compute@developer.gserviceaccount.com (Compute Engine default) Lessons Learned from Custom Service Account Implementation Issues with Default Service Account By default, PROJECT_NUMBER-compute@developer.gserviceaccount.com is used, but this account has Editor permissions8. From a security perspective, I decided to create a dedicated service account.\nWorking Configuration Here\u0026rsquo;s a generalized version of the configuration that worked properly in the actual project:\n# Service account for Cloud Build (executes deployment) resource \u0026#34;google_service_account\u0026#34; \u0026#34;cloud_build\u0026#34; { account_id = \u0026#34;cloud-build-deployer\u0026#34; project = var.project_id display_name = \u0026#34;Cloud Build Deployer\u0026#34; description = \u0026#34;Service account for deploying Cloud Functions\u0026#34; } # Service account for Cloud Functions runtime resource \u0026#34;google_service_account\u0026#34; \u0026#34;cloud_functions\u0026#34; { account_id = \u0026#34;cf-my-function\u0026#34; project = var.project_id display_name = \u0026#34;Cloud Functions Runtime\u0026#34; description = \u0026#34;Service account used at Cloud Functions runtime\u0026#34; } Required Permission Settings This is a crucial point. Since Cloud Build needs to use the Cloud Functions service account to execute deployment, granting roles/iam.serviceAccountUser permission was necessary9:\n# Permission for Cloud Build to use Functions service account resource \u0026#34;google_service_account_iam_member\u0026#34; \u0026#34;cloud_build_act_as\u0026#34; { service_account_id = google_service_account.cloud_functions.name role = \u0026#34;roles/iam.serviceAccountUser\u0026#34; member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } This permission allows the Cloud Build service account to specify the Cloud Functions service account as the runtime identity for Cloud Functions. Without this configuration, you\u0026rsquo;ll get permission errors during deployment.\nSpecial Cases Encountered with Pub/Sub Triggers Pub/Sub Service Account Format When using Pub/Sub triggers, the following configuration was necessary:\nresource \u0026#34;google_cloud_run_service_iam_member\u0026#34; \u0026#34;pubsub_invoker\u0026#34; { project = var.project_id location = \u0026#34;asia-northeast1\u0026#34; service = \u0026#34;my-function\u0026#34; role = \u0026#34;roles/run.invoker\u0026#34; member = \u0026#34;serviceAccount:service-${var.project_number}@gcp-sa-pubsub.iam.gserviceaccount.com\u0026#34; } Note that you must use PROJECT_NUMBER, not PROJECT_ID. I didn\u0026rsquo;t notice this at first and wondered why I was getting permission errors.\nWhy Pub/Sub IAM Configuration Became Complex Upon investigation, I found that in 2nd generation, Pub/Sub triggers now operate through Eventarc10. According to the official documentation, roles/eventarc.admin permission is required when creating Eventarc triggers11, and the trigger service account needs roles/run.invoker permission12.\nAdditional Requirements When Deploying via Cloud Build After checking the official documentation, I found that when deploying Gen2 functions via Cloud Build, the following additional permissions were also required13:\n# Additional permissions required for Cloud Build service account resource \u0026#34;google_project_iam_member\u0026#34; \u0026#34;cloud_build_additional\u0026#34; { for_each = toset([ \u0026#34;roles/storage.objectViewer\u0026#34;, # Access to source code \u0026#34;roles/logging.logWriter\u0026#34;, # Write build logs ]) project = var.project_id role = each.value member = \u0026#34;serviceAccount:${google_service_account.cloud_build.email}\u0026#34; } Cloud Build Deployment Configuration The actual Cloud Build configuration used (generalized):\nsteps: - id: deploy cloud function name: gcr.io/google.com/cloudsdktool/cloud-sdk entrypoint: \u0026#39;bash\u0026#39; args: - \u0026#39;-c\u0026#39; - | gcloud functions deploy my-function \\ --gen2 \\ --region=asia-northeast1 \\ --trigger-topic=my-topic \\ --runtime=nodejs20 \\ --entry-point=main \\ --service-account=${_CF_SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com The --gen2 flag and --service-account option are important.\nSecret Manager Integration (Additional Discovery) Benefits of Using Secret Manager Instead of Environment Variables During the migration work, I noticed that Secret Manager integration has become easier to use in 2nd generation2.\n# Access permissions for Secret Manager resource \u0026#34;google_secret_manager_secret_iam_member\u0026#34; \u0026#34;function_secrets\u0026#34; { for_each = toset([ \u0026#34;API_KEY\u0026#34;, \u0026#34;DATABASE_PASSWORD\u0026#34;, ]) project = var.project_id secret_id = each.value role = \u0026#34;roles/secretmanager.secretAccessor\u0026#34; member = \u0026#34;serviceAccount:${google_service_account.cloud_functions.email}\u0026#34; } Deployment configuration:\n--set-secrets=\u0026#34;API_KEY=API_KEY:latest\u0026#34; \\ --set-secrets=\u0026#34;DB_PASSWORD=DATABASE_PASSWORD:latest\u0026#34; This eliminated the need to set sensitive information directly in environment variables.\nLessons Learned from Migration 1. Relationship Between Function Name and Cloud Run Service Name In 2nd generation, the deployed function name becomes the Cloud Run service name as is. Without understanding this, you\u0026rsquo;ll be confused when setting up IAM.\n2. Distinguishing Between PROJECT_NUMBER and PROJECT_ID Especially for Pub/Sub service accounts, you must use PROJECT_NUMBER:\nCorrect: service-123456789@gcp-sa-pubsub.iam.gserviceaccount.com Wrong: service-my-project-id@gcp-sa-pubsub.iam.gserviceaccount.com 3. Debugging Permission Errors When permission errors occur, checking the following in Cloud Logging makes it easier to identify the cause:\nWhich service account is being used Which roles are missing Whether the resource name (especially Cloud Run service name) is correct Summary The migration to Cloud Functions 2nd generation involved major changes in the following areas:\nIAM resource type change: From google_cloudfunctions_function_iam_member to google_cloud_run_service_iam_member Role change: From roles/cloudfunctions.invoker to roles/run.invoker Additional required roles: roles/run.admin, roles/eventarc.admin, roles/artifactregistry.reader Pub/Sub trigger complexity: Additional configuration due to operating through Eventarc Default service account change: From App Engine default to Compute Engine default Custom service account permissions: Need for roles/iam.serviceAccountUser These changes stem from 2nd generation being based on Cloud Run. The official documentation clearly states that \u0026ldquo;Cloud Functions 2nd generation runs on Cloud Run infrastructure\u0026rdquo;14, and this fundamental architectural change leads to the differences in IAM configuration.\nUnderstanding these differences will help make the migration process smoother. In particular, knowing that Cloud Run-related permissions are needed is an important point to be aware of beforehand.\nI hope this article helps those undertaking similar migration work.\nReferences Compare Cloud Run functions | Cloud Run Documentation Access control with IAM | Cloud Run functions Documentation Function Identity | Cloud Run functions Documentation Terraform Tutorial | Cloud Run functions Documentation Google Cloud Functions is now Cloud Run functions | Google Cloud Blog\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCloud Functions IAM Roles | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAccess control with IAM | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSince 2nd generation Cloud Functions runs on Cloud Run, roles/run.invoker is required instead of roles/cloudfunctions.invoker\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRoles and permissions for Cloud Run targets | Eventarc Standard\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCompare Cloud Run functions | Cloud Run Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFunction Identity | Cloud Functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBest practices for using service accounts | IAM Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUse service account impersonation | Authentication\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCreate triggers from Pub/Sub events | Cloud Run Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRoles and permissions for Cloud Run targets | Eventarc Standard\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThis is the permission required for the Pub/Sub service agent to invoke Cloud Run functions\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBuild process overview | Cloud Run functions Documentation\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nGoogle Cloud Functions is now Cloud Run functions | Google Cloud Blog\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://b1gb4by.github.io/posts/2025-08-04-terraform-custom-sa-cloud-functions/","summary":"\u003cp\u003eRecently, I had the opportunity to migrate existing Cloud Functions from 1st generation to 2nd generation.\nDuring this process, I was surprised to find that the IAM configuration had changed more than expected, and the setup method for custom service accounts was also different from the 1st generation.\u003c/p\u003e\n\u003cp\u003eIn this article, I\u0026rsquo;ll share the technical insights gained from the actual migration work and the configurations required to get everything working properly.\u003c/p\u003e","title":"IAM Configuration Changes and Custom Service Account Implementation When Migrating to Cloud Functions Gen2"},{"content":"Basic Information Name and Date of Birth Item Content Name Taisuke Okamoto Date of Birth 1996/12/02 Education and Work History Year Month Education and Work History 2012 4 Entered Hyogo Prefectural Itami High School, General Course 2015 3 Graduated from Hyogo Prefectural Itami High School, General Course 2015 4 Entered Osaka Institute of Technology, Faculty of Information Science and Technology, Department of Information Network 2019 3 Graduated from Osaka Institute of Technology, Faculty of Information Science and Technology, Department of Information Network 2019 4 Joined Video Market Co., Ltd. 2021 1 Left Video Market Co., Ltd. 2021 1 Joined MONOC, Inc. 2021 8 Left MONOC, Inc. 2021 9 Joined IDC Frontier Inc. 2025 6 Left IDC Frontier Inc. 2025 7 Joined PLAID, Inc. Technical Stack Categories Stacks Programming / Library etc. Go / Python / Java / PHP / C / etc Code Management GitHub / GitLab / Bitbucket Infrastructure Google Cloud / AWS / IDCF Cloud IaaS CloudStack / vSphere Database/KVS MySQL / Redis / PostgreSQL / BigQuery / etc Infrastructure as Code Ansible / Terraform / etc Orchestration \u0026amp; Management Kubernetes / Docker / Rancher CI/CD CircleCI / Cloud Build / GitHub Actions / ArgoCD / Fleet Container Registry Harbor Observability Splunk / Grafana / Prometheus / OpenTelemetry / NeuVector Service Mesh Istio / Linkerd Job Responsibilities PLAID, Inc. ① Developer Experience \u0026amp; Performance Engineer July 2025 - Present\nInfrastructure and Architecture Design\nWIP Developer Experience and Productivity Enhancement\nWIP Technology Standardization and Modernization\nWIP IDC Frontier Inc. ① Container and Kubernetes Technology Evangelist / In-house Education Leader January 2023 - June 2025\nPlanning and implementing in-house education programs\nDesigned and conducted a 3-month container and Kubernetes learning program Maintained over 90% satisfaction rate, contributing to the improvement of engineers\u0026rsquo; technical skills Technical migration support for in-house systems\nLed containerization and migration to Kubernetes environments Responsible for solving technical issues and optimizing during migration Providing technical support internally and externally\nTechnical support for SE and sales teams Provided support and technical assistance for clients implementing containers and Kubernetes ② Kubernetes as a Service (KaaS) Development September 2022 - June 2025\nKubernetes integration development with CloudStack\nResearch and investigation of CSI Driver, Cloud Controller Manager, and Ingress Controller Custom Kubernetes implementation to meet company security requirements Continuous improvement of internal components with Kubernetes version upgrades Development of custom Kubernetes components\nProvided automatic update functionality through in-house addon-manager Custom implementation of Migration feature and Cluster Autoscaler Service development aligned with Rancher-based GUI provision Multi-platform support and CI/CD setup\nKubernetes setup on private cloud (vSphere) CI/CD environment setup for managing multiple Kubernetes versions Implementation of change detection scripts for efficient manifest management MONOC, Inc. ① Development and Operation of Product Order Management System February 2021 - August 2021\nDevelopment of in-house product order management system\nSignificant improvement in operational efficiency through automation of manual processes API development using Go (using standard packages only) Implementation of integration with EC platform (Shopify) Building a cloud-native operational environment\nDesign of a self-contained service architecture on Google Cloud CI/CD environment setup using CloudBuild + CloudRun Optimization of development process and achievements\nRapid system delivery as a solo developer Achieved significant improvement in operational efficiency and reduction of human errors Realized continuous improvement through accelerated development cycles ② Development and Operation of International EC Integration System February 2021 - August 2021\nDevelopment of integration system with Chinese and Korean EC sites\nImplementation of API, batch processing, and Webhooks using Go Achieved high-speed product registration and update processing of 20,000-30,000 items per day using Goroutines Built an error detection system through Slack Webhook integration Large-scale data processing and visualization\nOptimized response formatting and data registration to BigQuery within Goroutines Implemented GUI-based product information visualization accessible to non-engineers Acquisition of efficient system development and operation skills\nGained practical experience in international EC platform integration Enhanced flexible thinking and problem-solving abilities Strengthened goal achievement capabilities through team collaboration Video Market Co., Ltd ① Renewal of Streaming Service Playback Infrastructure October 2019 - January 2021\nRenewal of streaming service playback infrastructure\nImplemented rewrite from PHP to Go Realized microservices architecture using Kubernetes, transitioning from monolithic structure Led overall development as a key project member Kubernetes environment setup and optimization\nReduced manifest management costs using Kustomize Implemented secure communication using service mesh (Istio) Introduced monitoring with Grafana and Prometheus, and load testing with Locust Technical challenges and growth\nAchieved practical application of Go and Kubernetes in a short period, from learning to implementation Gained experience in introducing and operating various cloud-native tools Balanced solving existing system issues with introducing new technologies ② DRM Implementation Engineer for Video Streaming July 2020 - October 2020\nDesign and implementation of multi-DRM solutions\nBuilt DRM systems supporting Widevine, PlayReady, and FairPlay Development and operation of cloud-based DRM license servers Improved processing efficiency by optimizing content encryption workflows Establishment of secure viewing environments\nDRM implementation on client-side (Web, iOS, Android) Enhanced access control through integration with token-based authentication systems Integration of streaming protocols (HLS, DASH) with DRM Optimization of performance and user experience\nOptimized global distribution through CDN and DRM integration Improved mobile user experience by implementing offline playback functionality Rapid identification and resolution of DRM-related issues through the introduction of analytics tools Side Jobs Infrastructure Engineer December 2024 - June 2025 at Geears Inc.\nAWS Infrastructure Development and Operations\nDesigned and built cloud infrastructure using S3, ECS, ECR, VPC, RDS, ElastiCache, and other services Implemented secure access control using IAM Established monitoring systems with CloudWatch and optimized performance Managed sensitive information securely using Secrets Manager Data Analytics Platform Development\nResponsible for building, operating, and maintaining Redshift Spectrum Built and optimized data lakes for large-scale data analysis Achieved query performance improvements and cost optimization Containerization and CI/CD Environment Setup\nContainerized applications and orchestration using ECS Built CI/CD pipelines using GitHub Actions Improved deployment process efficiency and quality through automation Technical Coach and Advisor for Technology Support September 2021 - October 2024 at Relie inc.\nSupported backend and overall infrastructure for service development of a friend\u0026rsquo;s startup Currently providing technical coaching, fostering and educating in-house engineers Planning, creating, and providing learning content for non-engineers, covering basic knowledge to information literacy Providing technical support such as infrastructure design and operational advice to FinTech companies implementing containers and Kubernetes Design and Implementation of Custom Media Player August 2019 - September 2019 at GiGs inc.\nDeveloped and supported part of the service development for a friend\u0026rsquo;s startup Responsible for designing, implementing, and testing a custom web playback player for media playback on an audio platform Creation of Landing Page Website July 2017 - October 2017 at RISE EARTH Inc.\nHandled all aspects of creating, publishing, and operating a landing page for a startup introduced by a friend Main tasks included: DNS, firewall, and SSL configuration WordPress installation Site design planning and implementation Other Activities Tech Conference Management Joined as a committee member for CloudNative Days, Japan\u0026rsquo;s largest cloud-native tech conference, from 2022 Served as the Observability team leader, working on visualizing conference metrics From 2024, leading the overall conference management as Co-chair Also appointed as Co-Organizer of Grafana Meetup Japan in the same year, promoting Grafana Activities as DJ and VJ Started DJ activities in Kansai in 2019, and have been active as \u0026lsquo;BigBaby\u0026rsquo; mainly in Tokyo nightclubs since 2021 Utilizing extensive music knowledge and skills cultivated as a DJ to create a \u0026ldquo;five-senses stimulating\u0026rdquo; space with a genre-transcending VJ style, captivating audiences Currently expanding activities in Tokyo clubs Responsible for VJ performances for international artists at various venues, recognized as an up-and-coming VJ Performance Experience CLUBS CÉ LA VI Tokyo WARP SHINJUKU WOMB YOKOHAMA COAST garage+ ZEROTOKYO Zouk Tokyo FESTIVALS SONIC MANIA 2023 SUMMER SONIC 2024 Activity Balance pie title 2025 Activity Areas and Time Allocation \"Main Job\" : 50 \"Community Management\" : 25 \"Tech Education \u0026 Mentoring\" : 5 \"Side Jobs \u0026 Tech Support\" : 10 \"DJ/VJ Activities\" : 10 2025 Activity Distribution ","permalink":"https://b1gb4by.github.io/resume/","summary":"\u003ch1 id=\"basic-information\"\u003eBasic Information\u003c/h1\u003e\n\u003ch2 id=\"name-and-date-of-birth\"\u003eName and Date of Birth\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eItem\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eContent\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eName\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTaisuke Okamoto\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eDate of Birth\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1996/12/02\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"education-and-work-history\"\u003eEducation and Work History\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eYear\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eMonth\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eEducation and Work History\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2012\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eEntered \u003ca href=\"https://dmzcms.hyogo-c.ed.jp/kenita-hs/NC3/\"\u003eHyogo Prefectural Itami High School\u003c/a\u003e, General Course\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2015\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGraduated from Hyogo Prefectural Itami High School, General Course\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2015\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eEntered \u003ca href=\"https://www.oit.ac.jp/is/network/index.html\"\u003eOsaka Institute of Technology\u003c/a\u003e, Faculty of Information Science and Technology, Department of Information Network\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2019\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGraduated from Osaka Institute of Technology, Faculty of Information Science and Technology, Department of Information Network\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2019\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eJoined \u003ca href=\"https://www.videomarket.co.jp/\"\u003eVideo Market Co., Ltd.\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLeft Video Market Co., Ltd.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eJoined \u003ca href=\"https://monoc.inc/\"\u003eMONOC, Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e8\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLeft MONOC, Inc.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2021\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e9\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eJoined \u003ca href=\"https://www.idcf.jp/\"\u003eIDC Frontier Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2025\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e6\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLeft IDC Frontier Inc.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2025\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e7\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eJoined \u003ca href=\"https://plaid.co.jp/\"\u003ePLAID, Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"technical-stack\"\u003eTechnical Stack\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategories\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eStacks\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eProgramming / Library etc.\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGo / Python / Java / PHP / C / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCode Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGitHub / GitLab / Bitbucket\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eInfrastructure\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGoogle Cloud / AWS / IDCF Cloud\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eIaaS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCloudStack / vSphere\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eDatabase/KVS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMySQL / Redis / PostgreSQL / BigQuery / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eInfrastructure as Code\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAnsible / Terraform / etc\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eOrchestration \u0026amp; Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eKubernetes / Docker / Rancher\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCI/CD\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCircleCI / Cloud Build / GitHub Actions / ArgoCD / Fleet\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eContainer Registry\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eHarbor\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eObservability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSplunk / Grafana / Prometheus / OpenTelemetry / NeuVector\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eService Mesh\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eIstio / Linkerd\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"job-responsibilities\"\u003eJob Responsibilities\u003c/h1\u003e\n\u003ch2 id=\"plaid-inc\"\u003ePLAID, Inc.\u003c/h2\u003e\n\u003ch3 id=\"-developer-experience--performance-engineer\"\u003e① Developer Experience \u0026amp; Performance Engineer\u003c/h3\u003e\n\u003cp\u003eJuly 2025 - Present\u003c/p\u003e","title":"Resume"},{"content":"Describes detailed information about the device used by the individual.\nLaptop PC Macbook Pro (13-inch, 2019) 項目 内容 CPU Intel Core™ i7-8569U GPU Intel Iris Plus Graphics 655 Memory 16 GB 2133 MHz LPDDR3 OMEN by HP (16-inch, 2023) 項目 内容 CPU Intel Core™ i7-14700HX GPU NVIDIA® GeForce RTX™ 4070 Laptop GPU 12GB GDDR6 Memory 16GB (8GB×2) DDR5-5600MHz Lenovo Legion Pro 7i Gen 9 (16-inch, 2024) 項目 内容 CPU Intel Core™ i9-14900HX GPU NVIDIA® GeForce RTX™ 4080 Laptop GPU 12GB GDDR6 Memory 32GB (16GB*2) DDR5-5600MHz Desktop PC 項目 内容 Motherboard ROG STRIX H370-F GAMING (ASUSTeK COMPUTER INC.) CPU Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz GPU NVIDIA GeForce GTX 1060 6GB (MSI Co., Ltd.) Memory DDR4-2666MHz 8×4GB (Corsair Inc.) Storage(OS) Crucial MX500 500×2GB (Micron Technology, Inc.) Storage Western Digital Blue: 6TB, Green: 3×2TB (Western Digital Corporation) The desktop PC you are using has a variety of operating systems installed on it.\n項目 内容 OS_1 Windows 11 Pro (64bit) OS_2 Manjaro Linux OS_3 Ubuntu 24.04 OS_4 openSUSE Tumbleweed ","permalink":"https://b1gb4by.github.io/posts/2021-09-28-device-configs/","summary":"\u003cp\u003eDescribes detailed information about the device used by the individual.\u003c/p\u003e","title":"About the device used"}]