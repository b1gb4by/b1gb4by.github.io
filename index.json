[{"categories":["device"],"content":"私のデスク環境についてご紹介します.","date":"2022-10-25","objectID":"/2022/10/my-desk-tour/","tags":["computer","desk-tour","mouse","keyboard","display"],"title":"私のデスクツアー","uri":"/2022/10/my-desk-tour/"},{"categories":["device"],"content":"私が普段、仕事を行っているデスク環境についてご紹介します. 項目 製品名 モニター Acer G235H (23 inch) × 1, LG 29WN600-W (29 inch) × 2 キーボード Keychron K2, Razer Blackwidow X Tournament Edition Chroma マウス Apple Magic Trackpad, Logicool MX Ergo, Logicool G PRO デスク FLEXISPOT E7B (SANODESK) + DIY 天板 (190cm × 90 cm) チェア Herman Miller Aeron Chair ","date":"2022-10-25","objectID":"/2022/10/my-desk-tour/:0:0","tags":["computer","desk-tour","mouse","keyboard","display"],"title":"私のデスクツアー","uri":"/2022/10/my-desk-tour/"},{"categories":["device"],"content":"デスク環境について 在宅勤務が始まった時から自宅の環境をコツコツ整備を開始. (今の状態が v3 くらいです) Keychron のキーボードは、キーキャップを Razer PBT Keycap に変更しています. 当初は、23 インチのディスプレイ 3 枚だったのですが、少しワイドな画面がほしいなと思い、29 インチの WFHD を 2 枚購入した. モニターアームも先日までは、水平多関節の 3 画面を使用していましたが、どうしてもディスプレイの重さに耐えられず、重心が傾いてしまうという欠点があった. モニターアームを全部独立させることで、自由に動かせるようにした. その他はゲームや DJ もするのでその機材などもおいてたりします. ","date":"2022-10-25","objectID":"/2022/10/my-desk-tour/:1:0","tags":["computer","desk-tour","mouse","keyboard","display"],"title":"私のデスクツアー","uri":"/2022/10/my-desk-tour/"},{"categories":["device"],"content":"今後の展望 キーボードを 2 台配置しているとスペースを余分にとってしまうので、一台に統一したい。(ゲーミング PC に Bluetooth をつければ解決する) キーボードを統一する際に Keychron K2 から、以下のエルゴキーボードにしたい 候補 Keychron Q8 Kinesis Advantage2 Kinesis Advantage360 (一番気になっている) ","date":"2022-10-25","objectID":"/2022/10/my-desk-tour/:2:0","tags":["computer","desk-tour","mouse","keyboard","display"],"title":"私のデスクツアー","uri":"/2022/10/my-desk-tour/"},{"categories":["kubernetes"],"content":"先日開催された、「KubeCon + CloudNativeCon Europe 2022」でセキュリティをメインに個人的に興味をもったセッションを共有します.","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"先日開催された、「KubeCon + CloudNativeCon Europe 2022」でセキュリティをメインに個人的に興味をもったセッションを共有します. ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:0:0","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"KubeCon + CloudNativeCon とは？ KubeCon + CloudNativeCon は、クラウドネイティブコンピューティングに関する最大のオープンソースカンファレンスになります. Cloud Native Computing Foundation (CNCF) の主力のカンファレンスとして開催され、主要な OSS およびクラウドネイティブコミュニティが一同に集結して、 情報共有を行っています. 先日は、スペインのバレンシアで 5/16 - 20 の 5 日間、開催されました. (前夜祭が 2 日間、本祭が 3 日間という感じ) ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:1:0","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"選んだセッションの背景 今回は、セキュリティ関連をメインに取り上げました 個人的に好きだから マネージドを使っている場合、意識することも少ないが、管理している場合は意識する必要があるため ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:2:0","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"興味を持ったセッション ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:3:0","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"Trampoline Pods Node to Admin PrivEsc Built Into Popular K8s Platforms 概要 発表概要 Trampoline Pods ついて マネージドクラウドなどにおける、Trampoline Pods の調査結果の報告と、それに関する対策 Cilium を用いたデモ rbac-policeについて Trampoline Pods 業務に必要な特権を持つが、特権を昇格させるための跳躍台として使われる可能性のあるポッドのことを指す ノードが不正を行った場合、クラスタに対して壊滅的な攻撃を行い、場合によっては完全にクラスタを乗っ取ってしまうほど強力である rbac-police rbac-police とは、Palo Alt Networks 社が開発しているツール Kubernetes クラスタ内の ServiceAccounts、Pod、Node の RBAC パーミッションを取得し、Rego で記述されたポリシーを使って評価する デフォルトで 20 個のポリシーが定義されている Rego で書かれたポリシーはこちらを見ると良い 所感 マネージドクラウドで Kubernetes を使うのまずいのか？ そういうわけではない 今回取り上げた DaemonSet などは既に存在しない いくつかのプラットフォームでは、すでに強力な DaemonSet が削除されている Google はブログで、どのように対策を行っているかをまとめてくれている Privileged pod escalations in Kubernetes and GKE どう対策するべきなのか Least-Privileged namespace/resourceNames に対するパーミッションのスコープを設定 Track the powerful permissions \u0026 pods in your cluster / project 要求内容を文書化 Isolate powerful pods from untrusted / publicly-exposed ones Scheduling constraints: Taints \u0026 Tolerations, Node Affinity, PodAntiAffinity Remove powerful DaemonSets 特権的な機能を non-DaemonSet, controlPlane に移動 コアオブジェクトへの書き込み権限を最小化し、状態を CRDs, ConfigMap に格納 すべてを捨てるか、何も捨てないかではな Restrain powerful permissions OPA Gatekeeper などによる誤用の防止・検出 詳しい調査報告は、こちらで確認できる ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:3:1","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"How Attackers Use Exposed Prometheus Server to Exploit Kubernetes Clusters 概要 発表概要 Kubernetes におけるフィンガープリントについて Kubernetes の野放しな部分 Kubernetes UI Prometheus の野放しな部分 Basic 認証の使用を許可 (推奨) しているが、デフォルトでは有効ではない点 オープンエンドポイントをインターネットに公開する行為 実際にフィンガープリントを行うシナリオ なぜ、Kubernetes のフィンガープリントを気にするのか ここで言うフィンガープリントとは Kubernetes を使う上で存在する、様々な情報のことを指している 攻撃をするにも、まずは侵入したいターゲットについて、できる限り多くの情報を収集する クラスタ内のバージョン情報 CVE や脆弱性に対応することができ、それを利用することで悪用可能 アプリケーション、ツール、アーキテクチャに関する情報 競合他社に利用可能 所感 以下のことは大前提 Kubernetes security best practicesに従おう Prometheus を使用してすべてを監視しようね Prometheus はメトリクスを収集するツールだけではないということを再認識 Prometheus は多彩なメトリクスを取得することができるということを理解しておく必要がある 使う人間が攻撃者の場合、Prometheus を使いそれぞれのケースに応じたテクニックを駆使する 新たな脆弱性とは、常に戦い続けなければならない また、インサイダーに対する対策も必要 ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:3:2","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"Securing Kubernetes Applications by Crafting Custom Seccomp Profiles 概要 発表概要 Kubernetes における seccomp についての簡単な歴史 手作業でカスタム seccomp プロファイルを作成する 手動で行っていた作業を自動化する デフォルトでより安全な Kubernetes の明るい未来 seccomp とは secure computing mode の略 Linux カーネル上でアプリケーションのサンドボックスメカニズムを提供するためのセキュアコンピューティングの機能 許可されたシステムコールのリストを制限することにより、アプリケーションのセキュリティを向上させることが可能 システムコールルールにヒットした場合のさまざまなアクションをサポート Kubernetes にはかなり前に追加されている containerd,CRI-O, docker (shim) のようなコンテナランタイムによって選択されるデフォルトプロファイルをサポート seccomp に関する参考資料 コンテナセキュリティにおける権限制御 〜Seccomp とかよくわからんけどとりあえずこれくらいはやっておこう〜 seccomp について学ぼう 所感 SeccompDefault を、Kubernetes v1.25.0 でベータ版を卒業させたい熱量を感じた v1.24.0 のベータ版機能はデフォルトではもう有効になっていないため これに関しては、公式のブログを参照 この機能を安定版へ移行することで、Kubernetes のセキュリティが向上する 手動で生成する手順などはやったことがないから、個人的にはいい勉強だった ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:3:3","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"その他のセッション ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:4:0","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["kubernetes"],"content":"Secure Multi User HPC Jobs in Kubernetes with Kyverno 概要 Kyverno とは Kyverno は、ポリシーエンジンの一種 OpenPolicyAgent との違い Rego のような特別な言語を用いずにポリシーを定義できる YAML での定義 Kubernetes ネイティブなツールといえる ","date":"2022-05-26","objectID":"/2022/05/kubecon2022-europe-recap/:4:1","tags":["kubernetes","k8s","prometheus","aws","gcp","azure","security"],"title":"KubeCon + CloudNativeCon Europe 2022 Recap for Security","uri":"/2022/05/kubecon2022-europe-recap/"},{"categories":["go"],"content":"Go を初めて学習するかたに向けてのロードマップを作成しました.","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Go を初めて学ぶ方に向けて、ロードマップを作成してみました. これから学んでいく第一歩として、参考にしていただければと思います. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:0:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"はじめに 本ページは、筆者が全くの知見のない初学者が Go を学習し、利用していく上で必要な知識やスキルの習得方法を示したものです. そのため、本ページでは概要や用語の説明などは行いません. また、本ページの指針を全て達成することで Go の全てを網羅し、完全に理解できる訳ではありません. 必要な知識が必要な場合は個人で別途で調査、理解をする必要があることを予めご了承ください. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:1:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Go とは？ Go は、2009 年、Google の Robert Griesemer、Robert “Rob” C. Pike、Kenneth Lane Thompson によって設計されました. Go は以下の特徴を持っています. 静的型付け C 言語の伝統に則ったコンパイル言語 メモリ安全性 ガベージコレクション 構造的型付け CSP スタイルの並行性 etc… ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:2:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"はじめの一歩を踏み出す Go を学ぶ第一歩として、まずは言語の理解が必要になります. 以下の 2 つの教材を使用して、学習するのが良いでしょう. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:3:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"A Tour of Go A Tour of Goは Go を初めてさわる人に向けて提供されている教材になります. 日本語対応もされており、これ一つで Go 言語の機能の説明を一通り網羅しています. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:3:1","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Gopher 道場 Gopher 道場は、Go 体系的に学べます. また、Slack や GitHub 上なので質問なども行えるため、一人で勉強する場合も気軽に相談できます. 「自習室」から、これまでの教材や動画が閲覧できるので、そちらを活用するのが良いかと思います. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:3:2","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Go を写経する 言語の理解がある程度済んだら、次は実際に Go を「写経」してみましょう. 「写経」とは、参考書や実際のコードをそのまま写すことです. 内容は変更せず、そのまま書き写しましょう. 「写経」を行う事は、以下の理由で効果的に理解が深めることができます. 書くことによる記憶の定着 ミスした場所等のチェック タイポや記法のミスなどを即時に判断できる 実行結果の確認 自分の書いたコードにより、どのような結果を得ることができたのかを理解できる 「写経」を行う上で、いくつかのサイトをご紹介します. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:4:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Go by Example Go by Example は、各場面でのサンプルコードが数多く紹介されています. サンプルコードも少なく、シンプルなものなので、コードを初めて読む方も理解しやすいと思います. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:4:1","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Go Web Example Go Web Example は、「Go by Example」と比べて、より実践的なコードを写経することができます. 例えば、HTTP サーバの作成や、ルーティングなどが挙げられます. また、RDB の CRUD 処理なども学ぶことができます. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:4:2","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"Building an Awesome CLI App in Go – OSCON 2017 こちらのソースは少し古くはなりますが、Go を用いた CLI の作成をCobraと呼ばれるフレームワークを用いて行うことができます. 近年では Go で書かれた CLI が数多くでてきてます. 普段の開発で CLI の開発を行う機会は少ないかと思うので、挑戦してみると良いと思います. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:4:3","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"おすすめの書籍、文献など ここでは、ロードマップにそって学習を行う上で著者自身がお薦めする書籍や、文献などを紹介します. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:5:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"文献 Effective Go Effective Go は、Go コードを書くための Tips がまとめられています. こちらの文献を読む前に以下の文献も読んでおくと良いかと思います. How to Write Go Code The Go Programming Language Specification Go Code Review Comments Go Code Review Comments は、「Effective Go」の補足として見ると良いです. Go のコードをレビューする際の一般的なコメントがまとめられています. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:5:1","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"書籍 Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る Go をより実践的に使うためのポイントをわかりやすく説明しています しかし、Go についての基本理解を済ませてからの方が読みやすいです フレームワークに頼らず、Web の仕組みを理解し Go で実装できる点がおすすめです エキスパートたちのGo言語 一流のコードから応用力を学ぶ メルカリのエンジニアが各章ごとに個人で作成したライブラリを紹介しています Go でのアーキテクチャや設計思想などを考える際に参考になるかと思います 実用 Go言語 ―システム開発の現場で知っておきたいアドバイス Go の基本的な知識をインプットしてから読むことをお薦めします Go を実用的に使っていくためのベストプラクティスがまとまっている感じです Go言語による並行処理 Go を使う上で非常に重要となる、並行処理、Goroutinについて丁寧に説明してくれています 並行処理に関しては、Go 関係なく一般的な考えなども記載されているので、並行処理を知らない方でも読んで見ると良いと思います また、例も多いので理解する際のイメージもしやすいと思います よくわかるcontextの使い方 こちらも、@saki_engineerさんの書籍になります Go の標準パッケージ、contextパッケージについて詳細にかかれています 初学者にとっては使い道がわからないことがですが、使いこなせるとかなり便利なパッケージになります Goでの並行処理を徹底解剖！ こちらも、@saki_engineerさんの書籍になります 並行処理について網羅的・徹底的にまとめられている 最初は並行処理は難易度が高いため、深く理解するのが難しいですが、本書でその問題が解決できるかもしれません ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:5:2","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"e-Learning gophercises gophercisesは、Go の基本から応用的なアプリケーションの実装までを動画で紹介しています. Go の基礎理解を一通り深めたあと、「何か試しに実装するものないかな？」と思った方は、このサイトを参考にサンプルコードを書いてみても良いでしょう. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:5:3","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["go"],"content":"まとめ Go の学習ロードマップを考えてまとめてみました. Go のみならず、プログラミング言語の学習に近道はありません. 反復をくりかえし、少しづつ自分のものにしてきましょう. また、「Go を学んで終わり！」というわけでもなくその周辺の知識も有していく必要があります。 @Alikhll さんの こちらのロードマップなどを参考に、より知識の幅を広げていって貰えればと思います. ","date":"2022-05-13","objectID":"/2022/05/golang-beginner-loadmap/:6:0","tags":["golang","go","beginner"],"title":"Go 初学者ロードマップ","uri":"/2022/05/golang-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Kubernetesを初めて学習するかたに向けてのロードマップを作成しました.","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Kubernetesをはじめて学ぶ方に向けて、ロードマップを作成してみました。 これから学んでいく第一歩として、参考にしていただければと思います。 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:0:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"はじめに 本ページは、筆者がまったくの知見のない初学者がKubernetesを学習し、利用していく上で必要な知識やスキルの習得方法を示したものです。 そのため、本ページでは概要や用語の説明などは行いません。 また、本ページの指針をすべて達成することでKubernetesのすべてを網羅し、完全に理解できる訳ではありません。 必要な知識が必要な場合は個人で別途で調査、理解をする必要があることをあらかじめ、ご了承ください。 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:1:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"そもそも Kubernetes とは？ ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:2:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Kubernetes の読み方 Kubernetesは、クバネティス、クバネテス、クーべネティスと呼び方はさまざまありますが、読み方は人それぞれです。 また、K8sと略されることもあります。 Kubernetesの読み方について Kubernetes（希: κυβερνήτης, koo-ber-nay'-tace, クベルネテス）は、ギリシャ語で航海長または水先案内人を意味し、サイバネティクス（人工頭脳学）の語源でもある 引用: https://ja.wikipedia.org/wiki/Kubernetes ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:2:1","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"何をしているの？ Kubernetesは、コンテナをデプロイできる基盤となるソフトウェアであり、コンテナオーケストレーターの1つです。 もともとはGoogleのコンテナ盤であるBorgをベースにしたOSSであり、2014年6月にローンチされました。 現在は Cloud Native Computing Foundation (CNCF) によって管理されているGA Projectの1つです。 CNCFとは？ CNCFは、Cloud Nativeなシステムを推進するために2015年に創設されたLinux Foundation傘下の非営利団体の1つです。 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:2:2","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"学習ロードマップ 本題の学習のロードマップについてですが、個人的には以下の通りに学習を進めて行くのが良いと考えています。 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Step1. コンテナの基礎理解 Kubernetesを理解する上で、非常に密な関係性にあるのがコンテナです。 まずは、コンテナについて理解を深めることが最重要になります。コンテナを理解している場合は、このステップはスキップしても良いでしょう。 理解がないままKubernetesを理解を深めること困難です。まずは、コンテナの理解を深めしょう。 コンテナと言っても、コンテナを動かすエンジンは複数種類あるので、まずはDockerに焦点をあてて、学習を進めて行きます。 Step1 を学ぶポイント コンテナとは何なのか？ コンテナと仮想化の違いは？ Dockerfileの記述方法 Dockerの操作方法 イメージのビルド イメージのプッシュ コンテナの起動 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:1","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Step2. Kubernetes の基礎理解 コンテナの基礎を理解した後は、Kubernetesの基礎を理解しましょう。 Kubernetesを動かす前にまずは知識としてインプットしていくのが良いでしょう。 Step2 を学ぶポイント Kubernetesで実現できること また、それがなぜ必要とされているのか Kubernetesを使うメリット APIリソース群の理解 kubectl の使用方法 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:2","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Step3. Kubernetes の利用 コンテナやKubernetesの基礎的な部分を理解した後は、実際にKubernetesを触ってみましょう。 実際にKubernetesを動かして、体系的に学ぶようにすることで理解を深めていきます。 Step1, Step2でインプットした知識を、きちんとアウトプットしていくことでラーニングサイクルを回すようにしましょう。 Step3 を学ぶポイント Kubernetesの一連の動作を試してみる クラスターの作成 アプリケーションの操作（kubectlでの操作） デプロイ 探索 公開 スケーリング アップデート ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:3","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Step4. エコシステムの利用 Kubernetesには多くのエコシステムが提供されています。 エコシステムを活用することで、Kubernetesはより真価を発揮します。 また、本番環境などで運用する際、CI/CDや監視、ログ収集、セキュリティなど考慮する点が多く存在します。 エコシステムを利用することで、それらの課題を解決できます。 エコシステムとは？ 元々は生態系の用語であり、あるエリア（地域や空間など）の生命体が互いに依存しながら生態を維持する関係の様子を表します。 ここでは、Kubernetesを支えるツール群のことを指しています。 Step4 を学ぶポイント Kubernetesを運用する上でどのような点を考慮する必要があるのか どのようなエコシステムがあるのか ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:4","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"Step5. 内部ツールの理解・実装 しかし、実際にマネージドクラウド（AWS, Google Cloud, Azureなど）で運用する場合、あまり気にする必要はありません。 個人でKubernetesのコントローラーなどを開発していきたい方はStep5に挑戦してみましょう。 なお、Kubernetes関連の周辺ツールは、Go言語で書かれている事が多いです。 Go言語をはじめて触る方は、後日記載予定の「Go言語学習ロードマップ」をご覧いただければと思います。 Step5 を学ぶポイント カスタムコントローラーの基礎の理解 公開されているカスタムコントローラー群の理解 カスタムコントローラーの実装、動作検証 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:3:5","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"オススメの書籍、文献など ここでは、ロードマップにそって学習を行う上で著者自身がお薦めする書籍や、文献などを紹介します ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:4:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"書籍 仕組みと使い方がわかるDocker＆Kubernetesのきほんのきほん 対象 Step1, Step2 コンテナにはじめて触れる方やバックエンドの技術に詳しくない方でもLinuxの知識や、サーバの基礎なども併せて記載されているため読みやすいです イラストも多く、視覚的に知識をインプットできます Docker コンテナ開発・環境構築の基本 対象 Step1, Step2 コンテナを体系的に学ぶことができます コンテナを用いたCI/CD、アプリケーションの運用方法も基本から記載されています イラストでわかるDockerとKubernetes 対象 Step1, Step2 DockerやKubernetesの知識を有していない場合はまずこれを読んだほうがイメージはつかみやすいかと思います 概要がメインなので、サラッと読むには良いと思います Kubernetes完全ガイド（第2版） 対象 Step2, Step3 一番時初めにこの書籍から読み始めるのは少し難易度が高いため、上記の書籍を読んでから読むと良いです Kubernetesに関する知識が網羅的にまとめられています Kubernetesを使用していて、困った時にリファレンスとしても活用できます Kubernetes CI/CD パイプラインの実装 対象 Step4 題名の通り、CI/CDのパイプラインを構築について詳細に記されている Docker/Kubernetes 開発・運用のためのセキュリティ実践ガイド 対象 Step3, Step4 DockerやKubernetesの知識はある程度有していないと読むのは難しいと思います Kubernetes上での開発、運用視点からのセキュリティ対策についてまとめられていています Kubernetesの知識地図 —— 現場での基礎から本番運用まで 対象 Step3, Step4 Kubernetesの基礎から本番運用のベストプラクティスまで、押さえておきたい情報源を第一線のエンジニアが厳選してくれています 進化を続けるKubernetesと幅広いエコシステムについての知識をこの一冊で身につけられます 実践入門 Kubernetes カスタムコントローラーへの道 対象 Step5 Kubernetesで拡張機能（カスタムコントローラー）を開発する入門です Kubernetesを利用するだけの方はあまり作成しないかもしれないですが、Kubernetesに拡張機能を追加したい方は読んでみると良いと思います Kubernetes ネットワーク 徹底解説 対象 Step5 Kubernetesのネットワークの実現方法について説明されています TCP/IPは知っているが、Kubernetesのネットワークの実現方法は知らない人向けに、噛み砕いて体系的に説明してくれています ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:4:1","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"e-Learning Katacoda Katakodaは、ブラウザ環境で学習が行えるプラットフォームです コンテナ周辺の技術などのトレーニングが公開されており、すべてブラウザ環境でコマンド、ターミナル環境が提供されているため、環境構築などの手間などなく学習を行うことができます Kubernetes 学習とトレーニング (Microsoft) Microsoft社が提供している、トレーニングになります 動画ベースで各項目を説明しており、Kubernetes基本を理解すると共に、さまざまなKubernetesの機能などについても解説してくれています トレーニングは、こちらから受講できます つくって学ぶ Kubebuilder @zoetropeさんによって提供されている学習コンテンツになります Kubebuilderと呼ばれるフレームワークを使用して、Kubernetesを拡張するためのカスタムコントローラー/オペレーターを開発するため方法を解説されています Step5に進まれた方は、この記事を読んでカスタムコントローラー/オペレーターの開発手法を理解すると良いと思います ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:4:2","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"その他 ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:5:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"情報収集 Kubernetesの情報を収集する際には基本的には以下を使用しています Kubernetes Official Document Reference Blog GitHub kubernetes/kubernetes News KubeWeekly Kubernetes Podcast Kubernetes on Medium ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:5:1","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"コミュニティの参加 Kubernetes Slack KubernetesのSlackになります（Joinはこちらからできます） すでにJoin済みの場合は、こちらからサインインできます はじめて参加する方は以下のチャンネルに参加すると良いと思います。 #jp-users #jp-events #jp-dev #jp-mentoring #jp-users-novice #kubernetes-doc-ja 初学者の方で質問などを行いたい場合は、jp-users-noviceで聞いてみると良いでしょう ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:5:2","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"勉強会など Kubernetes Meetup Tokyo 国内では最大のKubernetesの勉強会になります 過去の勉強会の動画はこちらから見ることができます Kubernetes Meetup Novice 「まだ、学び始めたばっかりだけど発表してみたい」という方向けの勉強会になります 過去の勉強会の動画はこちらから見ることができます Kubernetes 変更内容共有会 Kubernetesのバージョンアップごとの変更内容で重要な部分や、興味深いポイントを紹介してくれる勉強会になります Kubernetesのバージョンに追従してくためにこちらの勉強会を活用してみても良いと思います 過去の勉強会の動画はこちらから見ることができます Kubernetes Internal Kubernetesをより深く掘り下げ、その他の周辺ツールなどの実装や設計などについて情報交換、交流をするための勉強会です 現在は、「kubenews」が毎週開催されています 過去の勉強会の動画はこちらから見ることができます OCHa(Oracle Cloud Hangout cafe) Cafe Kubernetes以外にクラウドネイティブな技術全般について発信しています 過去の勉強会の動画はこちらから見ることができます KubeConn + CloudNativeConn KubeCon + CloudNativeConは、Cloud Native Computing Foundation (CNCF) の主力カンファレンスカンファレンスとして開催されています Kubernetesのみならず、クラウドネイティブに関するコミュニティが一同に集結し、クラウドネイティブな技術の教育と進歩を推進しています Cloud Native Days 日本最大級のクラウドネイティブ・テックカンファレンスを開催しています 過去のカンファレンスの動画はこちらから見ることができます ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:5:3","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"資格 Kubernetesでは、Linux FoundationとCloud Native Computing Foundation (CNCF) が行っている試験が一番有名だと思います CKA (Certified Kubernetes Administrator) Kubernetesの基本的な機能に加え、基盤自体の運用方法やトラブルシュートなどの理解が求められます Kubernetesの基盤開発者向けの試験になります CKAD (Certified Kubernetes Application Developer) CKAと比べ、アプリケーション開発者向けの試験になります Kubernetesの基本的な機能に加え、Kubernetesをアプリをデプロイ・運用する基盤として十分に利用できるスキルがあるかが求められます CKS (Certified Kubernetes Security Specialist) CKAの試験をさらにセキュリティに焦点を当てた試験となります CKAを受けるための注意点 この試験を受けるには、事前にCKAに合格している必要があります。 KCNA (Kubernetes and Cloud Native Associate) Kubernetesと広範なクラウド ネイティブ エコシステムのエントリー レベルの知識とスキルをテストになります このテストでは以下のような知識が問われます 基本的なkubectlコマンドを使用してアプリケーションをデプロイする方法 Kubernetesのアーキテクチャ（コンテナ、ポッド、ノード、クラスター） クラウドネイティブランドスケープやプロジェクトの理解（ストレージ、ネットワーク、GitOps、サービスメッシュ） クラウドネイティブセキュリティの原則の理解など ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:5:4","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes"],"content":"まとめ 今回は、Kubernetesの学習ロードマップを考えてまとめてみました 筆者自身もKubernetesを触り始めてまだ日が浅いため、上記のものを参考に日々精進しています これをきっかけに一人でも多くの方がKubernetesに興味をもっていただけることを切に願います ","date":"2022-05-13","objectID":"/2022/05/k8s-beginner-loadmap/:6:0","tags":["kubernetes","k8s","beginner"],"title":"Kubernetes初学者ロードマップ","uri":"/2022/05/k8s-beginner-loadmap/"},{"categories":["kubernetes","k8s"],"content":"Rancher Desktop v1.0.0 がリリースされたので、実際に MXLinux で動かしてみました.","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"1 月 26 日に、Rancher Desktop が正式に v1.0.0 としてリリースされました. 今回は、実際に Rancher Desktop を MXLinux にインストールして動かそうと思います. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:0:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Rancher Desktop とは Rancher Desktop は Electron と Node.js をベースに構築されたデスクトップアプリケーションであり、デスクトップ上で Kubernetes とコンテナ管理を実行することができます. また、実行する Kubernetes のバージョンを自由に選択することができます. containerd、またはMoby (dockerd)を使って、コンテナイメージのビルド、プッシュ、プル、実行が可能です. ビルドしたコンテナイメージは、レジストリを必要とせず、すぐに Kubernetes で実行できます. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:1:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"必要条件 OSS のデスクトップアプリケーションで、macOS や Windows、そして Linux の様々な環境で動作させることができます. M1 にも対応しているため、ほとんどの環境で動作が可能になりました. 環境での必要条件は以下の通りです. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:2:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"macOS macOS Catalina 10.15 以降 CPU アーキテクチャ Apple Silicon（M1）または VT-x 搭載の Intel CPU ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:2:1","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"WindowsOS Windows Windows 10 ビルド 1909 以降 Home エディションにも対応 Hyper-V(仮想化機能) が有効化されている Windows Subsystem for Linux (WSL) Rancher Desktop は、Windows 上で WSL が必要ですが、セットアップの一部として自動的にインストールされます 手動でディストリビューションをダウンロードは不要 ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:2:2","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Linux .debや.rpmパッケージ、またはAppImagesをインストールできるディストリビューション ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:2:3","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"マシンスペック 8GB のメモリー 4 コアの CPU ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:2:4","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"動作の仕組み Rancher Desktop は、他のツールをラッピングしながら、動作を実現しています. MacOS と Linux では、Lima や QEMU といった仮想マシンを活用してcontainerdまたはdockerdと Kubernetes (k3s) を実行します. Windows システムでは、Windows Subsystem for Linux v2 (WSL2) を利用しています. 下図は rancher から引用 Rancher Desktop では、NERDCTL プロジェクトと Docker CLI を利用して、イメージを build、push、pull する機能が用意されています. なお、nerdctlとdockerの両方が自動的にパスに入れられます. Windows ではインストーラー中に、macOS と Linux では初回実行時に行われます. いずれのツールを使用する場合も、Rancher Desktop が適切なコンテナランタイムで実行されている必要があります. nerdctlの場合は、containerdランタイムを使用します。docker の場合は、dockerd (moby)ランタイムを使用します. Lima について Lima は WSL と似ており、自動ファイル共有とポート転送、および containerd を備えた Linux の仮想マシンを起動します. Lima は macOS ホストで使われることが想定されていますが、Linux ホストでも使うことができます. QEMU について QEMU は、OSS の PC エミュレーターです. x86 や SPARC、MIPS といったさまざまな CPU 上の Linux、Windows などで動作し、ほかの CPU の命令をネイティブコードに変換しながら実行できるという特徴を持ちます. k3s について k3s は、Rancher Labs 社が発表した軽量な Kubernetes の 1 つで、小さいサイズなバイナリと、メモリ使用量が少ないを特徴としています. 最近では、IoT や Edge コンピューティングなどでの活用が期待されています. nerdctl について nerdctl は containerd 向けのコンテナの操作ツールです. containerd 用の docker コマンドだと考えていただければと思います. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:3:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"MXLinux へのインストール Rancher Desktop を Linux ディストリビューションの 1 つである MXLinux にインストールしてみます. インストール方法は公式ドキュメントに従って、Rancher Desktop のリポジトリを追加し、Rancher Desktop をインストールします. Linux へのインストールはいくつかのパッケージがありますが、MXLinux は Debian(stable) ベースのため、.debパッケージを使用します. # リポジトリを取得し、登録 $ curl https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | sudo apt-key add - $ sudo add-apt-repository 'deb https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' # パッケージ一覧を更新 $ sudo apt update # Rancher Desktop をインストール $ sudo apt install rancher-desktop 以上で、Rancher Desktop のインストールは完了です. 非常に簡単ですね. MXLinux について MXLinux は DistroWatch.com でも 注目度の高い Linux ディストリビューションです. antiX と旧 MEPIS Linux コミュニティ間の共同事業として構築されたプロジェクトでギリシャおよびアメリカにて開発されています. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:4:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Rancher Desktop の起動 インストールした Rancher Desktop を起動してみます. アプリケーション自体は非常にシンプルでした. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"General ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:1","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Kubernetes Setting 次に、Kubernetes の設定を見てみます. Kubernetes versionでは、Kubernetes のバージョンを指定できます. 執筆時点での最新バージョンである v1.23.3 から、最も古いバージョンで v1.16.7 まで選択が可能です. Portはデフォルトでは、6443が設定されています. Container runtimeでは、containerdまたはdockerd (moby)のどちらかを選択可能です. Memory (GB), CPUsは、メモリー、CPU のコア数を指定できます. 赤いラインまで数値を上げると、下図のように警告文が表示されます. 一度、環境をクリーンアップしたい場合は、Reset Kubernetesを押すことで簡単にリセットすることができます. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:2","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Supporting Utilities Supporting Utilitiesでは、インストールされたツール郡が表示されています. 既にインストールされていた Docker などに対しては、丁寧に注意喚起が書かれていました. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:3","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Images Images では、Rancher Desktop で使用しているイメージが表示されています. イメージ一覧の⋮からScanを選択すると、イメージの脆弱性を Trivy を使用してスキャンしてくれる. ここで、Image Namespaceに注目してください. containerdでは、Kubernetes と同様にnamespaceという概念が存在しています. そのため、Kubenetes が namespaceを持つことができるように、containerdも同じようにnamespaceを持つことができます. 上図では、namespace:k8s.ioにイメージが存在しているということになります. 実際にnerdctlコマンドを使用して、namespaceを確認してみます. nerdctl namespace listでnamespaceの一覧を表示します. $ ./.local/bin/nerdctl namespace list NAME CONTAINERS IMAGES VOLUMES buildkit 0 0 0 k8s.io 22 16 0 実行してみると、k8s.ioにイメージが存在していることが確認できました. また、nerdctl --namespace k8s.io psでnamespace:k8s.ioで、Rancher Desktop で作成した Kubernetes のコンテナ群が確認できます. $ ./.local/bin/nerdctl --namespace k8s.io ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1f642d94e7d5 docker.io/rancher/klipper-lb:v0.3.4 \"entry\" 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr/lb-port-443 2ca56d5f0874 docker.io/rancher/mirrored-library-traefik:2.5.6 \"/entrypoint.sh --gl…\" 49 minutes ago Up k8s://kube-system/traefik-6bb96f9bd8-cflf4/traefik 2f1c800451cf docker.io/rancher/mirrored-coredns-coredns:1.8.6 \"/coredns -conf /etc…\" 49 minutes ago Up k8s://kube-system/coredns-5789895cd-wgxlq/coredns 56bd8fba2fda docker.io/rancher/klipper-lb:v0.3.4 \"entry\" 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr/lb-port-80 5908afd18045 docker.io/rancher/mirrored-pause:3.6 \"/pause\" 49 minutes ago Up k8s://kube-system/coredns-5789895cd-wgxlq 8c16131e6d1b docker.io/rancher/mirrored-pause:3.6 \"/pause\" 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr 95b859fec9ed docker.io/rancher/mirrored-pause:3.6 \"/pause\" 49 minutes ago Up k8s://kube-system/local-path-provisioner-6c79684f77-plbxh a0656b86ab35 docker.io/rancher/local-path-provisioner:v0.0.21 \"local-path-provisio…\" 49 minutes ago Up k8s://kube-system/local-path-provisioner-6c79684f77-plbxh/local-path-provisioner a5c31106d6d7 docker.io/rancher/mirrored-pause:3.6 \"/pause\" 49 minutes ago Up k8s://kube-system/traefik-6bb96f9bd8-cflf4 c9417746b27d docker.io/rancher/mirrored-pause:3.6 \"/pause\" 49 minutes ago Up k8s://kube-system/metrics-server-7cd5fcb6b7-4cbkd ce64e7b0a242 docker.io/rancher/mirrored-metrics-server:v0.5.2 \"/metrics-server --c…\" 49 minutes ago Up k8s://kube-system/metrics-server-7cd5fcb6b7-4cbkd/metrics-server ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:4","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Troubleshooting Troubleshootingでは、ログの有効化、また Rancher Desktop 自体の初期化ができます. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:5:5","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"検証 Rancher Desktop 上で、実際にコンテナなどを動かして見ます. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:6:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"nerdctl の使用 nerdctlコマンドを使用して、nginx を起動してみます. namespace は未指定の場合、デフォルトでdefaultに配置されます. nginx を起動 $ ./.local/bin/nerdctl run -d -p 9999:80 nginx docker.io/library/nginx:latest: resolved |++++++++++++++++++++++++++++++++++++++| index-sha256:2834dc507516af02784808c5f48b7cbe38b8ed5d0f4837f16e78d00deb7e7767: done |++++++++++++++++++++++++++++++++++++++| ... elapsed: 7.2 s total: 54.1 M (7.5 MiB/s) 484e86556e00843200c97b5aa779ba81a9016796e23964e5a0cac27159de444e コンテナの状態を確認 $ ./.local/bin/nerdctl ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 484e86556e00 docker.io/library/nginx:latest \"/docker-entrypoint.…\" 6 minutes ago Up 0.0.0.0:9999-\u003e80/tcp nginx-484e8 namespace を確認 $ ./.local/bin/nerdctl namespace list NAME CONTAINERS IMAGES VOLUMES buildkit 0 0 0 default 1 1 0 k8s.io 22 16 0 namespace default のプロセスを確認 $ ./.local/bin/nerdctl --namespace default ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 484e86556e00 docker.io/library/nginx:latest \"/docker-entrypoint.…\" 11 minutes ago Up 0.0.0.0:9999-\u003e80/tcp nginx-484e8 また、Rancher Desktop からもnamespace:defaultに nginx イメージを確認することができます. 最後に、localhost:9999にアクセスして、nginx の起動を確認してみます. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:6:1","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"Helm の使用 Rancher Desktop では、起動時に Helm もインストールされるので、Helm を使って Kubernetes に Grafana をデプロイしてみます. Helm に Grafana のリポジトリを追加 $ ./.local/bin/helm repo add grafana https://grafana.github.io/helm-charts Helm にリポジトリが追加されていることを確認 $ ./.local/bin/helm repo list NAME URL grafana https://grafana.github.io/helm-charts 追加した Grafana リポジトリからチャートを確認 $ ./.local/bin/helm search repo grafana NAME CHART VERSION APP VERSION DESCRIPTION grafana/grafana 6.21.1 8.3.4 The leading tool for querying and visualizing t... grafana/grafana-agent-operator 0.1.5 0.22.0 A Helm chart for Grafana Agent Operator grafana/enterprise-logs 2.0.0 v1.3.0 Grafana Enterprise Logs grafana/enterprise-metrics 1.7.3 v1.6.1 Grafana Enterprise Metrics grafana/fluent-bit 2.3.0 v2.1.0 Uses fluent-bit Loki go plugin for gathering lo... grafana/loki 2.9.1 v2.4.2 Loki: like Prometheus, but for logs. grafana/loki-canary 0.5.1 2.4.1 Helm chart for Grafana Loki Canary grafana/loki-distributed 0.42.0 2.4.2 Helm chart for Grafana Loki in microservices mode grafana/loki-simple-scalable 0.2.0 2.4.2 Helm chart for Grafana Loki in simple, scalable... grafana/loki-stack 2.5.1 v2.1.0 Loki: like Prometheus, but for logs. grafana/promtail 3.10.0 2.4.2 Promtail is an agent which ships the contents o... grafana/tempo 0.13.0 1.3.0 Grafana Tempo Single Binary Mode grafana/tempo-distributed 0.15.0 1.3.0 Grafana Tempo in MicroService mode grafana/tempo-vulture 0.2.0 1.3.0 Grafana Tempo Vulture - A tool to monitor Tempo... Helm チャートをリリース $ ./.local/bin/kubectl create namespace monitoring $ ./.local/bin/helm install grafana --namespace monitoring grafana/grafana W0128 03:37:33.477723 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.480386 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.538004 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.538201 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ NAME: grafana LAST DEPLOYED: Fri Jan 28 03:37:32 2022 NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: 1. Get your 'admin' user password by running: kubectl get secret --namespace monitoring grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo 2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster: grafana.monitoring.svc.cluster.local Get the Grafana URL to visit by running these commands in the same shell: export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl --namespace monitoring port-forward $POD_NAME 3000 3. Login with the password from step 1 and the username: admin ################################################################################# ###### WARNING: Persistence is disabled!!! You will lose your data when ##### ###### the Grafana pod is terminated. ##### ################################################################################# 上記の手順に従って、正常に Grafana にログインすることができました. 最後に、kubectlコマンドを使って Grafana が立ち上がっていることを確認します. $ ./.local/bin/kubectl get all --namespace monitoring NAME READY STATUS RESTARTS AGE pod/grafana-6b9d4f7f86-mwb4q 1/1 Running 0 15m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/grafana ClusterIP 10.43.218.65 \u003cnone\u003e 80/TCP 15m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/grafana 1/1 1 1 15m NAME DESIRED CURRENT READY AGE replicaset.apps/grafana-6b9d4f7f86 1 1 1 15m 以上のように、Rancher Desktop を起動するだけでアプリケーションの開発やデプロイが簡単に行うことができました. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:6:2","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":["kubernetes","k8s"],"content":"所感 今回は、v1.0.0 がリリースされた Rancher Desktop を触ってみましたが、非常に完成度の高いツールでした. containerd、nerdctlを初めて触る方も Rancher Desktop は良い機会だと思います. 昨年、Docker Desktop が有料化が大きなニュースとなり、それに伴い、密かに代替案として注目されていた Rancher Desktop ですが、 Docker Desktop から乗り換えたとしても遜色なく利用できるかと思います. 万が一、Docker のランタイムを使用したいと思えば、Rancher Desktop 上から切り替えれば良いので、大して手間は掛かりません. また、Kubernetes のバージョンをスムーズに切り替えられるのも個人的には大きなメリットなのかなと思います. これから、コンテナを利用する手段の 1 つとして、広く普及していく可能性は大いにあり得るので、今後の動向に注目していきたいと思います. ","date":"2022-01-27","objectID":"/2022/01/setup-rancher-desktop-on-mxlinux/:7:0","tags":["kubernetes","k3s","rancher","helm","containerd","moby","linux","mxlinux"],"title":"MXLinux で Rancher Desktop を動かす","uri":"/2022/01/setup-rancher-desktop-on-mxlinux/"},{"categories":[],"content":"先日、AWS re:Invent にて Kubernetes クラスターで Node の自動スケーリングをする Karpenter が GA になりました. 今回は、それについて深堀りしてみます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:0:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"はじめに これは Kubernetes Advent Calendar 2021 18 日目の記事です. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:1:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Karpenter とは Karpenter は、「Just-in-time Nodes for Any Kubernetes Cluster」 と公式で記載されている通り、スケジュールが不能な Pod に対して、瞬時に新しい Node をプロビジョニングする機能を提供します. それにより、Kubernetes クラスター上でワークロードを実行する際の効率とコスト改善をゴールとしています. Karpenter の動作は以下の通りになります. Kubernetes スケジューラがスケジューリング不能とマークした Pod を監視する Pod から要求された以下のスケジューリング制約の評価 リソース要求 Node セレクタ アフィニティ トレラント トポロジー拡散制約 Pod の要件を満たす Node のプロビジョニング 新しい Node で実行する Pod のスケジューリング Node が不要になったら削除する Karpenter の利用方法について Karpenter は 2021 年 12 月 現在、AWS のみをサポートしています. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:2:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Kubernetes におけるオートスケール Kubernetes には、Pod と Node それぞれにオートスケールする機能が提供されています. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:3:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Pod Pod には、以下の 2 種類のスケール方法があります. 水平スケール (Horizontal Pod Autoscaler) Pod の水平スケールは、Pod 数を増やすことにより処理性能を向上させるスケール方法です. CPU やメモリなど、ユーザが独自に設定したメトリクスなども判断の材料として使えます. Pod 数は以下の計算式で算出されます. 垂直スケール (Vertical Pod Autoscaler) Pod が利用可能なリソースを増やすことで処理性能を向上させるスケール方法です. こちらは、CPU やメモリを判断材料に使用します. どちらかと言うとリソース使用率の最適化を行っているイメージです. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:3:1","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Node Node の水平オートスケーラー (Cluster Autoscaler) ワーカー Node の台数を増やすことによって処理性能を向上させるスケール方法です. Pod の水平スケールなどと連携することも可能です. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:3:2","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"インストール方法 Karpenter は、Helm Chart でクラスタにインストールされます. Karpenter はさらに、IAM Roles for Service Accounts (IRSA)を必要とします. 現在、Karpenter を使用する際に必要なユーティリティは以下の通りです. AWS CLI kubectl the Kubernetes CLI eksctl the CLI for AWS EKS helm the package manager for Kubernetes AWS への Karpenter のインストール方法は、こちらの公式ドキュメントの 「Getting Started with Karpenter on AWS」 を参考にすると良いと思います. Karpenter の Helm Chart はこちらから確認することができます. Terraform を用いたインストール Terraform を使用したインストール方法もあります.詳しくはこちらを参照してください. 概要図は下図の通りです。 ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:4:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"プロビジョナーの設定 Karpenter の仕事は、スケジュールできない Pod を処理する Node を追加し、その Node で Pod をスケジュールし、不要になったら Node を削除することです. Karpenter を設定するには、Karpenter がスケジューリング不能な Pod と期限付き Node を管理する方法を定義するプロビジョナーを作成します. 以下は、Karpenter のプロビジョナーについて知っておくと良いと思います. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:5:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Unschedulable pods Karpenter は、ステータス条件 Unschedulable=True を持つ Pod のみをプロビジョニングしようとします. これは、kube-scheduler が既存の容量に Pod をスケジュールすることに失敗したときに設定されます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:5:1","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Provisioner CR Karpenter では、プロビジョニング構成を指定するために、Provisioner というカスタムリソースを定義しています. 各プロビジョナーは個別の Node セットを管理しますが、Pod はそのスケジューリング制約をサポートする任意のプロビジョナーにスケジュールすることができます. プロビジョナーには、プロビジョニング可能な Node と Node の属性（Node を削除するためのタイマーなど）に影響を与える制約が含まれています. 以下が プロビジョナーのリソースになります. apiVersion: karpenter.sh/v1alpha5 kind: Provisioner metadata: name: default spec: ttlSecondsUntilExpired: 2592000 ttlSecondsAfterEmpty: 30 taints: - key: example.com/special-taint effect: NoSchedule labels: billing-team: my-team requirements: - key: \"node.kubernetes.io/instance-type\" operator: In values: [\"m5.large\", \"m5.2xlarge\"] - key: \"topology.kubernetes.io/zone\" operator: In values: [\"us-west-2a\", \"us-west-2b\"] - key: \"kubernetes.io/arch\" operator: In values: [\"arm64\", \"amd64\"] - key: \"karpenter.sh/capacity-type\" operator: In values: [\"spot\", \"on-demand\"] provider: {} spec.ttlSecondsUntilExpiredは、コントローラが Node を終了するまでに待つ秒数で、Node の作成時から計測されます. これは、最終的に一貫した Node アップグレード、メモリリーク保護、破壊テストのような機能を実装するのに便利です. このフィールドが設定されていない場合、有効期限切れによる終了は無効になります. spec.ttlSecondsAfterEmptyは、Node が空になったことを検出した時点から、コントローラが Node を削除しようとするまでに待つ秒数です. Node は、デーモンセットを除いて、その Node にスケジュールされている Pod がない場合、空であると見なされます. spec.requirementsは、プロビジョニングされた Node のパラメータを制約します. nodeAffinity や nodeSelector と組み合わせることも可能です. 演算子 { In, NotIn } は、値を含めたり除外したりするためにサポートされています. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:5:2","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Node のデプロビジョニング Karpenter では、不要になった Node を以下のように削除しています. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:6:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Finalizer Karpenter は、作成する各 Node にファイナライザービットを配置します。 これらの Node を削除するリクエスト（TTL や手動での kubectl による Node 削除など）が来ると、Karpenter は Node をコード化し、すべての Pod を排出して EC2 インスタンスを終了させ、Node オブジェクトを削除する. Karpenter は、Node を適切に削除するために必要なすべてのクリーンアップ作業を処理します. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:6:1","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Node Expiry Node の有効期限値 (ttlSecondsUntilExpired)に達すると、その Node は（まだワークロードを実行していても）Pod から排出され、削除されます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:6:2","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Empty Nodes Karpenter が管理する Node で稼働している最後のワークロード Pod がなくなると、その Node には emptiness タイムスタンプが付与されます。その「Node が空になる」有効期限 (ttlSecondsAfterEmpty) 達すると、ファイナライズがトリガーされます. Node を削除する方法について Karpenter が Node を削除する方法の詳細については、Node のデプロビジョニングの詳細を参照してください. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:6:3","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Node のアップグレード Node をアップグレードする簡単な方法は、ttlSecondsUntilExpired を設定することです。Node は設定された期間後に終了し、より新しい Node と入れ替わります. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:7:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"制約条件 プロビジョナーで定義された制約や、デプロイされる Pod から要求された制約がないため、Karpenter はクラウドプロバイダが利用できる機能全体から選択されます. Node は、任意のインスタンスタイプを使用して作成し、任意のゾーンで実行することができます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:8:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"スケジューリング Karpenter は、Kubernetes のスケジューラーが unschedulable とマークした Pod をスケジュールします. スケジューリング制約と起動容量を解決した後、Node を作成し、Pod をバインドします. このステートレスなアプローチは、レースコンディションを回避し、パフォーマンスを向上させるのに役立ちます. 起動した Node に何か問題があれば、Kubernetes は自動的に新しい Node に Pod を移行します. Karpenter が Node を立ち上げると、その Node は Kubernetes のスケジューラーがその上でをスケジュールすることも可能になります. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:9:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"クラウドプロバイダー Karpenter は、関連するクラウドプロバイダーに新しい Node のプロビジョニングの要求を行います. 最初にサポートされるクラウドプロバイダーは AWS ですが、Karpenter は他のクラウドプロバイダーでも動作するように設計されています. Kubernetes のよく知られたラベルを使用しながら、プロビジョナーは、クラウドプロバイダーに固有のいくつかの値を設定することができます. 個人でプロバイダーの開発する場合は、リポジトリのpkg/cloudprovider/配下に作成します. ディレクトリ構造は以下の通りです. fakeディレクトリは、参考例として用意されています. . ├── aws │ ├── apis │ │ └── v1alpha1 │ └── fake ├── fake ├── metrics └── registry まず、pkg/cloudprovider/registry配下で、クラウドプロバイダー毎に以下の以下のファイルを作成することで登録ができます. // +build \u003cYOUR_PROVIDER_NAME\u003e import ( \"github.com/aws/karpenter/pkg/cloudprovider/\u003cYOUR_PROVIDER_NAME\u003e\" ) func NewCloudProvider() cloudprovider.CloudProvider { return \u003cYOUR_PROVIDER_NAME\u003e.NewCloudProvider() } また、pkg/cloudprovider配下で、クラウドプロバイダーごとに環境に合わせて作成します. fake ディレクトリを確認すると以下のファイルが用意されています. その他の必要な情報は環境に合わせて追加すると良いです. . ├── cloudprovider.go └── instancetype.go ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:10:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"Cluster Autoscaler との違い Karpenter と同様に、Kubernetes Cluster Autoscaler は、現在のキャパシティでは対応できない Pod の実行要求が来たときに、Node を追加するように設計されています. Cluster Autoscaler は Kubernetes プロジェクトの一部であり、ほとんどの主要な Kubernetes クラウドプロバイダーが実装しています. プロビジョニングを見直すことで、Karpenter は以下の改善を提供しています. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:11:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"クラウドの柔軟性を活かした設計 Karpenter は、AWS で利用できるあらゆる種類のインスタンスに効率的に対応できる能力を備えています. Cluster Autoscaler は、もともと何百ものインスタンスタイプ、ゾーン、購入オプションに対応できるような柔軟性を持って構築されたものではありません. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:11:1","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"グループレスの Node プロビジョニング Karpenter は、Node グループのようなオーケストレーションの仕組みを使わずに、各インスタンスを直接管理します. これにより、キャパシティが利用できない場合、数分ではなくミリ秒単位で再試行することができます. また、何百もの Node グループを作成することなく、多様なインスタンスタイプ、アベイラビリティゾーン、および購入オプションを活用することができます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:11:2","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"スケジューリングの実施 Cluster Autoscaler は、作成した Node に Pod をバインドしません. その代わり、Node がオンラインになった後に同じスケジューリング決定を行うために kube-scheduler に依存します.Karpenter が起動した Node には、すぐにその Pod がバインドされます。kubelet` はスケジューラーや Node の準備が整うのを待つ必要がありません. イメージの事前プルも含め、コンテナランタイムの準備をすぐに開始できます.これにより、Node の起動レイテンシを数秒短縮することができます. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:11:3","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":[],"content":"所感 今回は、Karpenter について少し深堀りしてみました. 個人的には、GKE Autopilot の動的 Node プロビジョニングプロセスと同じなのかなと思っています. Karpenter はそのツールの OSS 版と言えると思います. GKE Autopilot と同様に、Karpenter はスケジューリング不能な Pod の仕様を観測し、集約されたリソース要求を計算し、すべての Pod の実行に必要な容量を持つ基礎的な計算サービス（Amazon EC2 など）に要求を送信します. また、Karpenter では、カスタムリソースを定義して、以下の Node のプロビジョニング構成を指定することができます. 構成を柔軟に変更できる点は、かなり大きいメリットだと感じました. インスタンスサイズ/タイプ、トポロジー(ゾーンなど) アーキテクチャ(arm64、amd64 など) ライフサイクルタイプ(スポット、オンデマンド、プリエンプティブなど) 一方、Karpenter は、Node が不要になった場合、デプロビジョンを行うこともできます. これは、Node の有効期限設定 (ttlSecondsUntilExpired) または Karpenter プロビジョニングされた Node 上で実行されている最後のワークロードが終了したとき (ttlSecondsAfterEmpty) に決定することができます. この 2 つのイベントのどちらかがトリガーとなり、Node をコード化し、Pod を排出し、基盤となるコンピュートリソースを終了させ、Node オブジェクトを削除するファイナライゼーションが行われます. このデプロビジョニング機能は、Node を最新の AMI で最新の状態に保つためにも使用できます. Karpenter を使えば、Node のプロビジョニング、オートスケール、アップグレードをオフロードして、アプリケーションの実行に集中することができると思います. Karpenter はあらゆる種類の Kubernetes アプリケーションで動作しますが、特に、大量の多様な計算リソースを迅速にプロビジョニングおよびデプロビジョニングする必要があるユースケースで優れたパフォーマンスを発揮すると思います. (機械学習モデルのトレーニング、シミュレーションの実行、複雑な金融計算を行うバッチジョブなど) 現在は、AWS のみでしか動作しませんが今後の動向には注目していきたいと思います. また、時間があれば他クラウドへの実装などもしてみようと思います. ","date":"2021-12-16","objectID":"/2021/12/karpenter-deep-dive/:12:0","tags":["AWS","EKS","kubernetes","k8s","auto-scaling"],"title":"Karpenter Deep Dive","uri":"/2021/12/karpenter-deep-dive/"},{"categories":["security"],"content":"Google Authenticator からの引き継ぎ方法についてまとめました.","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"Google Authenticator の機種変更時の引き継ぎ方法について説明します. また、個人的に推奨している Microsoft Authenticator についても解説します. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:0:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"概要 近年、セキュリティの強化として2 段階認証の導入が推奨され、多くの方が SMS 認証や Google Authenticator などの認証アプリケーションをスマートフォンなどにインストールしているかと思います. しかし、認証アプリは機種変更などをした際に正しい引き継ぎ手順を踏まなければ、認証アプリにログインできなくなります.それによって苦汁を舐めた人たちも多くいるのではないでしょうか. そのような事態にならないためにも、正しい手順を理解し、スムーズに引き継げるようにしましょう. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:1:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"そもそも 2 段階認証って？ 2 段階認証はその名の通り、「2 度の認証を行う」ことです. 従来の 1 つの認証方法を使うよりはるかにセキュアに管理する事ができます. 2 段階認証には、様々な方法があります. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:2:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"SMS, メールなどを用いる場合 認証サーバなどで特定の文字列などが発行され、送信されます. ユーザはそれを画面上で入力します. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:2:1","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"2 段階認証アプリケーションを用いる場合 アプリケーション上でワンタイムのセキュリティコードが自動的に生成され、そのコードを画面上に入力します. 2 段階認証の別名称について 2 段階認証アプリは別名、TOTP (Time-based One-Time Password) アプリとも呼ばれます ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:2:2","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"2 段階認証を扱う上での注意点 いくらセキュアな機能だとしても注意するべき点はいくつかあります. 2 段階目の認証として最も利用されているのはスマートフォンだと思います. スマートフォンの電話番号宛に SMS が届き、そのコードを利用したり、キャリアメールアドレスに送られるコードを利用したりするため、スマートフォンの紛失・盗難時にログインできなくなります. これは、ワンタイムパスワードを用いる場合も同じことが言えます. Google Authenticator を利用している場合は、スマートフォンにインストールして利用しているため、紛失・盗難時には同じくログインすることができません. また、スマートフォンの機種を変更した場合も引き継ぎを正しく行っていなければアプリケーションをインストールしても復元することができません. これらを回避する方法としては以下の通りです. 複数の認証方法を設定しておく SMS + 2 段階認証アプリケーション 2 段階認証アプリケーション + メール etc… 引き継ぎの際、2 段階認証の設定を無効化(解除)しておく ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:3:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"引き継ぎ方法 (Google Authenticator) Google Authenticator を新しいデバイスへ引き継ぐ方法について解説します. 以前までは、アプリケーションに登録している 2 段階認証を全て無効化する必要がありましたが、現在は引き継ぐ前のデバイスでアカウント情報をエクスポートし、 それを新しいデバイスでインポートすることでアカウントを移行することができます. それぞれのデバイスでの手順は以下の通りです. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:4:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"iOS 移行前のデバイス Google Authenticator を起動 起動したアプリケーションの右上のメニューボタン...をタップし、「アカウントのエクスポート」を選択 エクスポート画面で、右下「続行」ボタンをタップ 指紋認証、FaceID、または端末に設定している PIN（パスコード）を入力して本人確認を実行 移行させるアカウントを選択して、「エクスポート」をタップ 移行用 QR コードが表示されたら準備完了 新しいデバイス Google Authenticator を起動し、「開始」をタップ 左下「既存のアカウントをインポートしますか？」をタップ 右下「QR コードをスキャン」をタップ エクスポート時に作成した移行用 QR コードを読み込む ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:4:1","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"Android 移行前のデバイス Google Authenticator を起動 起動したアプリケーションの右上のメニューボタン...をタップし、「アカウントの移行」を選択 エクスポート画面で、右下「アカウントのエクスポート」ボタンをタップ 本人確認を実行 「次へ」をタップ 移行用 QR コードが表示されたら準備完了 新しいデバイス Google Authenticator を起動し、「使ってみる」をタップ 左下「既存のアカウントをインポートしますか？」をタップ 右下「QR コードをスキャン」をタップ エクスポート時に作成した移行用 QR コードを読み込む 上記の手順を実行後、「インポート完了」と表示されれば引き継ぎは完了です. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:4:2","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"Microsoft Authenticator の利用 上記では Google Authenticator を解説しましたが、私はMicrosoft Authenticatorを使用しています. 理由としては以下の通りです. バックアップ機能が搭載されていない 登録されているアプリケーションを並び替えると UI が壊れる 同一アプリケーションが複数表示される (誤って消すと両方とも消える) スマートフォン・アプリケーションでしか利用できない 非常にシンプルなのですが、UI が壊れるのも耐え難く、最大の理由としては「バックアップ機能が搭載されていない」という点です. 万が一、デバイスが起動しなくなった際の再設定などの手間を考えると、あまり使いやすいとは言えません. 一方で、Microsoft Authenticator だと、Microsoft アカウントをアプリと同期することでバックアップが可能です. 詳しい方法に関しては、こちらを参照ください. Microsoft Authenticator を利用する際の注意点 iOS 版では iCloud でバックアップを行うため、iCloud のアカウントが必要となります. しかし、Microsoft Authenticator も Google Authenticator と同じく、スマートフォン・アプリケーションでしか利用できません. 「PC でも使用したい！」と言う方は、Twilio社のAuthyを使用することをおすすめします. Authy を利用する際の注意点 Authy を利用する場合は、別途 Authy のアカウントを作成する必要があります. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:5:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["security"],"content":"まとめ 今回は、2 段階認証の仕組みと、認証アプリケーションの引き継ぎ方法などについて解説しました. 2 段階認証アプリケーションを使用することで、アカウントの情報をよりセキュアに管理することができる反面、きちんと管理する必要があります. 特に 2 段階認証設定後のバックアップコードの管理には十分、注意してください. 実体が無いとは言え、重要な資産なので、この記事を参考に大切に保管しましょう. ","date":"2021-10-04","objectID":"/2021/10/2-factor-auth/:6:0","tags":["authenticator","2factor","microsoft","google"],"title":"Google Authenticator からの引き継ぎ方法","uri":"/2021/10/2-factor-auth/"},{"categories":["device"],"content":"個人で使用しているデバイスの詳細情報について説明します.","date":"2021-09-28","objectID":"/2021/09/device-configuration/","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"個人で使用しているデバイスの詳細情報について説明します. ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:0:0","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"Macbook Pro (13-inch, 2019) 項目 内容 OS macOS 12.4 21F79 x86_64 CPU Intel i7-8569U (8) @ 2.80GHz GPU Intel Iris Plus Graphics 655 Memory 16 GB 2133 MHz LPDDR3 ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:1:0","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"PC 使用している デスクトップ PC には、様々な OS がインストールされています. ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:2:0","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"共通 (Desktop) 項目 内容 Motherboard ROG STRIX H370-F GAMING (ASUSTeK COMPUTER INC.) CPU Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz GPU NVIDIA GeForce GTX 1060 6GB (MSI Co., Ltd.) Memory DDR4-2666MHz 8×4GB (Corsair Inc.) Storage(OS) Crucial MX500 500×2GB (Micron Technology, Inc.) Storage Western Digital Blue: 6TB, Green: 3×2TB (Western Digital Corporation) ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:2:1","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"Windows 項目 内容 OS Windows 11 Pro (64bit) ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:2:2","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["device"],"content":"Linux 項目 内容 OS_1 Manjaro Linux OS_2 MXLinux 21 OS_3 Ubuntu 22.04 OS_4 CentOS 7-2009 OS_5 Rocky Linux 8 OS_6 Alpine Linux 3.16.0 OS_7 openSUSE Tumbleweed ","date":"2021-09-28","objectID":"/2021/09/device-configuration/:2:3","tags":["linux","macOS","windows","device"],"title":"使用しているデバイスについて","uri":"/2021/09/device-configuration/"},{"categories":["documentation"],"content":"個人で作成した Spotify プレイリストを紹介します","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"以下のプレイリストを現在、作成しています. TPO に合わせて様々なジャンルの音楽をお楽しみ下さい. ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:0:0","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"Playlists ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:0","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"01_legend ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:1","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"02_legend.edm ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:2","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"03_house ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:3","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"04_dub.bass ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:4","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"05_psychedelic.trance ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:5","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"06_kawaii ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:6","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"07_latin ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:7","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"08_hiphop ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:8","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"09_j.hiphop ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:9","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"10_rock ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:10","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"11_j.rock ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:11","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"12_pop ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:12","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"13_j.pop ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:13","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"14_game.anime ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:14","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"15_chill.spot ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:15","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"16_bounce ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:16","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"17_vocaloid ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:17","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"18_drills ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:18","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"19_swings ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:19","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":["documentation"],"content":"20_euro ","date":"2021-06-08","objectID":"/2021/06/my-spotify-playlist/:1:20","tags":["spotify","music"],"title":"俺の Spotify プレイリスト","uri":"/2021/06/my-spotify-playlist/"},{"categories":null,"content":"About Taisuke Okamoto","date":"2019-08-02","objectID":"/resume/","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"基本情報 項目 内容 氏名 岡本 泰典 (オカモト タイスケ) 生年月日 1996/12/02 最終学歴 大阪工業大学 情報科学部 ネットワークデザイン学科 (旧: 情報ネットワーク学科) ","date":"2019-08-02","objectID":"/resume/:1:0","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"保有スキル Golangでのバックエンド開発、設計、テスト、運用、保守 クリーンアーキテクチャを意識したコーディング TDDでのテストコード開発 Kubernetesでのサービス開発、設計、テスト、運用、保守 Kubernetesコンポーネントの開発、設計、テスト、運用、保守 Kubernetes周辺のエコシステム（Observability系ツール）の導入、運用、保守 ","date":"2019-08-02","objectID":"/resume/:2:0","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"技術スタック カテゴリ 技術スタック Programming language / Library etc. Go, Python, Java, PHP, C, Solidity Programming language / Library etc. (individual) C++, C#, V, Zig, gRPC Framework Gin(Go), Falcon(Python), Spring Boot(Java) Infrastructure Google Cloud Middleware Redis, Memorystore Database MySQL, PostgreSQL(individual), Cloud SQL Data analytics BigQuery Environment setup Ansible, Cloud Build, Docker, Terraform(individual) Container Orchestration Kubernetes, Rancher, CloudRun IaaS CloudStack, vSphere CI ArgoCD, CircleCI, Cloud Build, GitHub Actions Monitoring Prometheus, Grafana Service Mesh Istio, Linkerd(individual) Code Management GitHub, GitLab, Bitbucket ","date":"2019-08-02","objectID":"/resume/:3:0","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"職務経歴詳細 ","date":"2019-08-02","objectID":"/resume/:4:0","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"株式会社 IDC フロンティア (2021/09 ~ 現在) 項目 内容 プロジェクト規模 約 1 名 役割 学習コンテンツの企画、作成、学習会の実施など 業務内容 コンテナ・Kuberentesの社内での普及、およびクライアントへの導入時の技術支援 使用した技術 Kubernetes, Docker etc… 社内でコンテナ・Kubernetsの普及を加速させるために学習コンテンツを作成し、エンジニアに対し学習会を実施しました 学習会は3か月で構成され、各回ごとにアンケートなどの回答をお願いしていました 勉強会の満足度は毎回90%以上を維持しており、学習会後の補修では、さらに深い知識の共有や、その日の疑問を解消していました 現在では、自社システムのコンテナ・Kubernetes化が進んでおり、その移行時の支援や課題解決を行っています また、SE(Sales Engineer)や営業の技術支援も行っており、コンテナ・Kubernetesの導入時の課題解決や、上記の学習コンテンツを使用したクライアントへの技術サポートもしております 技術支援では、コンテナ・Kuberentes以外にも、CI/CDやObservabilityなどのツールの導入支援も併せて行っています 項目 内容 プロジェクト規模 約 20 名 (内チーム: 2名) 役割 機能検討、設計、コーディング、その他、調査、研究など 業務内容 Kubernetes as a Service (KaaS) 開発 使用した技術 VMware vSphere, CloudStack, GitHub Actions, Fleet, Docker, Kubernetes, Golang 私が関わっているプロジェクトは、OSSのクラウドプラットフォームであるCloudStackでKubernetesを使用できるように以下のコンポーネントの各種機能や実装に関する調査・研究を行っています CSI Driver Cloud Controller Manager Ingress Controller CloudStackにもKubernetesを動かすAPIが提供されているけどなんで？ CloudStackには、Kubernetesを構築する機能を有していますが、自社のセキュリティ要件に満たないため、独自に実装しました そのため、Kubernetesのバージョンアップに伴う内部コンポーネントなどの修正などは、実際にOSSなどを読み解くことで自分たちのコンポーネントに反映させています その他にも、ユーザー体験向上のために、以下のような自社独自のコンポーネントを開発しています addon-managerの内製による自動アップデート機能の提供 顧客クラスターに導入することで、自社コンポーネントの更新を自動化することを実現しています また、Addonを定期的に取得することもできます 上記のコンポーネントを使用するためのマニフェストを管理するサーバーを設置しており、各環境、各バージョンごとに沿ったマニフェストを取得することが可能です Migration機能 クラスターの直接操作でしか変更できないような対応を自動で行ってくれる機能 Cluster Autoscalerの提供 弊社ではRancherをベースにGUIの提供を行っているため、Rancherの仕様に沿ったサービスの提供を行っています Cluster Autoscalerは各プロバイダーには存在している機能ですが、Rancher社から提供されていないため、OSSとして提供されているコードを参考に独自に実装を行いました プライベートクラウド vSphereをベースにKubernetesを構築しているので、上記とはまた異なるリソースを独自で用意してユーザーに提供しています 非常に多くのKubernetesバージョンをサポート・管理しているため、「マニフェストの変更差分などを検知することが難しい」という課題がついて回ります そのため、CIで変更差分を出力するようなスクリプトを実装することで、解決しています また、CD(Fleet)も併せて実装することで、活発的に開発が行えるように整備しています 以上のことから、Kubernetesを「利用する」のではなく、「利用してもらう」ための開発を行っており、他の人に比べ内部の実装についての知見が豊富であると自負しています ","date":"2019-08-02","objectID":"/resume/:4:1","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"パペルック株式会社 (2021/02 ~ 2021/08) 項目 内容 プロジェクト規模 約 2 名 役割 テックリード、機能検討、設計、コーディング、レビュー 業務内容 自社の商品発注管理システムの開発・運用 使用した技術 Google Cloud, Cloud Build, Docker, Shopify, Golang, MySQL, Redis 私が入社するまでは、商品発注管理はすべて手動で行われており、その業務が他の従業の生産性を著しく低下させていました そのため、業務効率の向上やヒューマンエラー対策も兼ねて、システムの開発を行いました 開発者が私しかいなかったという点と、素早い提供を要求されたため、 Google Cloud内で完結するサービスの運用を考え、開発を勧めました 具体的な開発内容は以下の通りです GolangでのAPI開発 Frameworkは使用せず、標準パッケージですべて実装 Google Cloud内で完結するサービスの運用 CloudBuild + CloudRunでのCI/CDの構築、および開発サイクルの加速化 自社で使用しているECプラットフォーム（Shopify）との連携 上記の開発を行うことで、以前に比べ大幅に業務効率が上昇し、かつヒューマンエラーによる手戻りの時間も大幅に削減することができました 項目 内容 プロジェクト規模 個人開発 役割 機能検討、設計、コーディング、クライアントとの仕様検討、および交渉 業務内容 中国、韓国 EC サイトと自社サービスとの連携システムの開発・運用 使用した技術 Google Cloud, Cloud Build, Docker, Shopify, Golang, MySQL, BigQuery 中国・韓国のECサイトと提携を結んでおり、それらのECサイトの商品を国内で展開するための連携システムの開発をおこなっていました それらの連携はGo言語を使って、以下の機能を作成しました APIの作成 バッチ処理の作成 Webhookの実装 日々多くの商品が登録されるため、Goroutineを使用して、1日あたり2~3万件の登録・更新処理を高速におこなうことができました また、Goroutine内でレスポンスの整形やBigQueryへの登録を最適化に取り組んだことで、データの情報をGUIなどでも可視化できるようにして、非エンジニアでもどのような商品があるのかを確認しやすいようにしました 登録結果などはSlackとのWebhook連携を導入して検知しており、エラー発生時なども早期に検知できるようにしました これらの経験を通じて、効率的なシステム開発と運用における実践的なスキルを磨くことができました この経験から柔軟な発想と問題解決能力を持ち、チームとの協力を通じて目標の達成に取り組むことができると考えています 項目 内容 役割 社内インフラの管理、整備 業務内容 社内のネットワーク管理、およびPCなどの資産管理、およびスマートロックの導入 社内のネットワーク整備がまったくされていなかったため、社内のネットワークの安定化に尽力しました 具体的には以下の整備を行いました Wi-FiルータやLANケーブルなどの交換 ネットワークセキュリティの設定の堅牢化 また、PCなどの資産管理なども杜撰であったため、管理番号の付与や初期セットアップの手順などのドキュメントを提供しました さらに、スマートロックの導入により社内自体のセキュリティも堅牢化しました ","date":"2019-08-02","objectID":"/resume/:4:2","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"株式会社ビデオマーケット (2019/04 ~ 2021/01) 項目 内容 プロジェクト規模 約 20 名 (内チーム: 4名) 役割 APIの機能検討・設計・コーディング・レビュー、Kubernetes環境の構築・レビュー、監視ツールの導入、CI/CDの導入 業務内容 配信サービス内の再生基盤のリニューアル 使用した技術 Google Cloud, Circle CI, Golang, PHP, Python, Redis 動画再生の基盤としてPHPを採用していましたが、機能が増えるたびに暫定対応で耐え凌いでいた結果、異なるバージョンが複数実行されている状況でした そのため、既存で動いているPHPの再生基盤をGo言語へリプレイスすることにしました リプレイスを機に、これまで自社サーバでモノリスで管理されていたAPIたちを、Kubernetesを採用しコンテナ化とマイクロサービス化の両方を実現しました 当時、私はGo言語もKubernetesに関しても知識は未熟であり、一から学習をして、プロジェクト内で開発を行いました 最終的には開発の主力として、全体的なリードをする形になりました はじめてKubernetesでの運用を試みたが、以下のような多くのエコシステムを導入し、これまでの課題を解決することができました Kustomizeなどのマニフェスト管理ツールを用いることで、マニフェストの管理コストの削減を実現 サービスメッシュ（Istio）を活用し、マイクロサービス間のセキュアな通信を実現 Grafana, Prometheusなどを用いたモニタリングの実現 Locustを用いた負荷試験の実現 ","date":"2019-08-02","objectID":"/resume/:4:3","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"業務外活動 ","date":"2019-08-02","objectID":"/resume/:5:0","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"技術関連 テックカンファレンスの運営 (CloudNative Days) (2021/11 - 現在) 日本最大級のクラウドネイティブ・テックカンファレンスに実行委員として参画しています これまで以下のカンファレンスにてObservabilityチームリーダーを牽引しています Observability Conference 2022 by CloudNative Days CloudNative Security Conference 2022 by CloudNative Days CloudNative Days Tokyo 2022 CI/CD Conference 2023 by CloudNative Days 株式会社Relie (2021/07, 2022/01 - 現在) 友人が起業した会社のサービス開発のバックエンド、インフラ全般をサポートしています また、現在では技術コーチとして社内のエンジニアの育成、および教育を行っています 項目 内容 案件名 eSportの総合プラットフォームの開発 業務内容 APIの設計・開発・レビュー、DBの構築、マイグレーションの自動化、インフラ環境の構築・運用・保守 使用技術 Golang, Google Cloud (GAE, CloudSQL, BigQuery) 項目 内容 案件名 技術コーチなどの社内のエンジニアリング支援 業務内容 技術研修の実施、プロダクトの技術的課題解決の支援、クラウド技術や、CI/CDの導入支援 使用技術 PHP, AWS, GitHub Actions 株式会社GiGs (2019/07 - 2019/11: 5 ヶ月) 友人から起業した企業のサービスの開発の一部を開発・サポートを行いました 項目 内容 案件名 音声プラットフォームの開発 業務内容 独自メディア再生プレイヤーの設計、実装、テスト 使用技術 CentOS, HTML, CSS, JavaScript 株式会社ライズアース (2017/10 - 2017/12: 3 ヶ月) 友人から紹介を受けたスタートアップ企業のLPの作成から公開、運用をすべて行いました 項目 内容 案件名 LP サイトの作成 業務内容 WordPress の構築・運用・保守、LP サイトの作成 使用技術 CentOS, WordPress, PHP, JavaScript, CSS, MySQL ","date":"2019-08-02","objectID":"/resume/:5:1","tags":null,"title":"RESUME","uri":"/resume/"},{"categories":null,"content":"その他 DJ, VJとしての活動 (2019 - 現在) 2019年から関西でDJ活動をスタートし、2021年からBigBabyとして都内のナイトクラブを中心に活動しています DJとして培った豊富な音楽知識とスキルを活用し、ジャンルにとらわれないVJスタイルで「五感を刺激する」空間を作り上げ、観客を魅了しています 現在は都内のクラブで活動の幅を広げています 各現場で海外アーティストのVJも担当しており、これから注目のVJとして評価されています ー出演経験ー CLUB CÉ LA VI Tokyo（東京・渋谷） WOMB（東京・渋谷） Zouk Tokyo（東京・銀座） YOKOHAMA COAST garage+ ZEUS Tokyo（東京・六本木）※閉店 FESTIVAL SONIC MANIA 2023（千葉・幕張メッセ） ","date":"2019-08-02","objectID":"/resume/:5:2","tags":null,"title":"RESUME","uri":"/resume/"}]