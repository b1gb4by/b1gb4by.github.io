[{"content":"1 月 26 日に、Rancher Desktop が正式に v1.0.0 としてリリースされました.\n今回は、実際に Rancher Desktop を MXLinux にインストールして動かそうと思います.\nRancher Desktop とは Rancher Desktop は Electron と Node.js をベースに構築されたデスクトップアプリケーションであり、デスクトップ上で Kubernetes とコンテナ管理を実行することができます.\nまた、実行する Kubernetes のバージョンを自由に選択することができます.\ncontainerd、またはMoby (dockerd)を使って、コンテナイメージのビルド、プッシュ、プル、実行が可能です. ビルドしたコンテナイメージは、レジストリを必要とせず、すぐに Kubernetes で実行できます.\n必要条件 OSS のデスクトップアプリケーションで、macOS や Windows、そして Linux の様々な環境で動作させることができます. M1 にも対応しているため、ほとんどの環境で動作が可能になりました.\n環境での必要条件は以下の通りです.\nmacOS  macOS  Catalina 10.15 以降   CPU アーキテクチャ  Apple Silicon（M1）または VT-x 搭載の Intel CPU    WindowsOS  Windows  Windows 10 ビルド 1909 以降 Home エディションにも対応   Hyper-V(仮想化機能) が有効化されている Windows Subsystem for Linux (WSL)  Rancher Desktop は、Windows 上で WSL が必要ですが、セットアップの一部として自動的にインストールされます 手動でディストリビューションをダウンロードは不要    マシンスペック  8GB のメモリー 4 コアの CPU  動作の仕組み Rancher Desktop は、他のツールをラッピングしながら、動作を実現しています.\nMacOS と Linux では、Lima や QEMU といった仮想マシンを活用してcontainerdまたはdockerdと Kubernetes (k3s) を実行します.\nWindows システムでは、Windows Subsystem for Linux v2 (WSL2) を利用しています.\n 下図は rancher から引用  Rancher Desktop では、NERDCTL プロジェクトと Docker CLI を利用して、イメージを build、push、pull する機能が用意されています. なお、nerdctl と docker の両方が自動的にパスに入れられます. Windows ではインストーラー中に、macOS と Linux では初回実行時に行われます.\nいずれのツールを使用する場合も、Rancher Desktop が適切なコンテナランタイムで実行されている必要があります.\nnerdctlの場合は、containerdランタイムを使用します。docker の場合は、dockerd (moby)ランタイムを使用します.\n Lima について\nLima は WSL と似ており、自動ファイル共有とポート転送、および containerd を備えた Linux の仮想マシンを起動します. Lima は macOS ホストで使われることが想定されていますが、Linux ホストでも使うことができます.\n  QEMU について\nQEMU は、OSS の PC エミュレーターです. x86 や SPARC、MIPS といったさまざまな CPU 上の Linux、Windows などで動作し、ほかの CPU の命令をネイティブコードに変換しながら実行できるという特徴を持ちます.\n  nerdctl について\nnerdctl は containerd 向けのコンテナの操作ツールです. containerd 用の docker コマンドだと考えていただければと思います.\n MXLinux へのインストール Rancher Desktop を Linux ディストリビューションの 1 つである MXLinux にインストールしてみます.\nインストール方法は公式ドキュメントに従って、Rancher Desktop のリポジトリを追加し、Rancher Desktop をインストールします.\nLinux へのインストールはいくつかのパッケージがありますが、MXLinux は Debian(stable) ベースのため、.debパッケージを使用します.\n1 2 3 4 5 6 7 8 9  # リポジトリを取得し、登録 $ curl https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | sudo apt-key add - $ sudo add-apt-repository \u0026#39;deb https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./\u0026#39; # パッケージ一覧を更新 $ sudo apt update # Rancher Desktop をインストール $ sudo apt install rancher-desktop   以上で、Rancher Desktop のインストールは完了です. 非常に簡単ですね.\n MXLinux について\nMXLinux は DistroWatch.com でも 注目度の高い Linux ディストリビューションです. antiX と旧 MEPIS Linux コミュニティ間の共同事業として構築されたプロジェクトでギリシャおよびアメリカにて開発されています.\n Rancher Desktop の起動 インストールした Rancher Desktop を起動してみます. アプリケーション自体は非常にシンプルでした.\nGeneral Kubernetes Setting 次に、Kubernetes の設定を見てみます.\nKubernetes versionでは、Kubernetes のバージョンを指定できます. 執筆時点での最新バージョンである v1.23.3 から、最も古いバージョンで v1.16.7 まで選択が可能です.\nPortはデフォルトでは、6443が設定されています.\nContainer runtimeでは、containerdまたはdockerd (moby)のどちらかを選択可能です.\nMemory (GB), CPUsは、メモリー、CPU のコア数を指定できます. 赤いラインまで数値を上げると、下図のように警告文が表示されます.\n一度、環境をクリーンアップしたい場合は、Reset Kubernetesを押すことで簡単にリセットすることができます.\nSupporting Utilities Supporting Utilitiesでは、インストールされたツール郡が表示されています. 既にインストールされていた Docker などに対しては、丁寧に注意喚起が書かれていました.\nImages Images では、Rancher Desktop で使用しているイメージが表示されています. イメージ一覧の⋮からScanを選択すると、イメージの脆弱性を Trivy を使用してスキャンしてくれる.\nここで、Image Namespaceに注目してください. containerdでは、Kubernetes と同様にnamespaceという概念が存在しています. そのため、Kubenetes が namespaceを持つことができるように、containerdも同じようにnamespaceを持つことができます. 上図では、namespace:k8s.ioにイメージが存在しているということになります.\n実際にnerdctlコマンドを使用して、namespaceを確認してみます. nerdctl namespace listでnamespaceの一覧を表示します.\n1 2 3 4  $ ./.local/bin/nerdctl namespace list NAME CONTAINERS IMAGES VOLUMES buildkit 0 0 0 k8s.io 22 16 0   実行してみると、k8s.ioにイメージが存在していることが確認できました.\nまた、nerdctl --namespace k8s.io psでnamespace:k8s.ioで、Rancher Desktop で作成した Kubernetes のコンテナ群が確認できます.\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ ./.local/bin/nerdctl --namespace k8s.io ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1f642d94e7d5 docker.io/rancher/klipper-lb:v0.3.4 \u0026#34;entry\u0026#34; 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr/lb-port-443 2ca56d5f0874 docker.io/rancher/mirrored-library-traefik:2.5.6 \u0026#34;/entrypoint.sh --gl…\u0026#34; 49 minutes ago Up k8s://kube-system/traefik-6bb96f9bd8-cflf4/traefik 2f1c800451cf docker.io/rancher/mirrored-coredns-coredns:1.8.6 \u0026#34;/coredns -conf /etc…\u0026#34; 49 minutes ago Up k8s://kube-system/coredns-5789895cd-wgxlq/coredns 56bd8fba2fda docker.io/rancher/klipper-lb:v0.3.4 \u0026#34;entry\u0026#34; 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr/lb-port-80 5908afd18045 docker.io/rancher/mirrored-pause:3.6 \u0026#34;/pause\u0026#34; 49 minutes ago Up k8s://kube-system/coredns-5789895cd-wgxlq 8c16131e6d1b docker.io/rancher/mirrored-pause:3.6 \u0026#34;/pause\u0026#34; 50 minutes ago Up k8s://kube-system/svclb-traefik-svnfr 95b859fec9ed docker.io/rancher/mirrored-pause:3.6 \u0026#34;/pause\u0026#34; 49 minutes ago Up k8s://kube-system/local-path-provisioner-6c79684f77-plbxh a0656b86ab35 docker.io/rancher/local-path-provisioner:v0.0.21 \u0026#34;local-path-provisio…\u0026#34; 49 minutes ago Up k8s://kube-system/local-path-provisioner-6c79684f77-plbxh/local-path-provisioner a5c31106d6d7 docker.io/rancher/mirrored-pause:3.6 \u0026#34;/pause\u0026#34; 49 minutes ago Up k8s://kube-system/traefik-6bb96f9bd8-cflf4 c9417746b27d docker.io/rancher/mirrored-pause:3.6 \u0026#34;/pause\u0026#34; 49 minutes ago Up k8s://kube-system/metrics-server-7cd5fcb6b7-4cbkd ce64e7b0a242 docker.io/rancher/mirrored-metrics-server:v0.5.2 \u0026#34;/metrics-server --c…\u0026#34; 49 minutes ago Up k8s://kube-system/metrics-server-7cd5fcb6b7-4cbkd/metrics-server   Troubleshooting Troubleshootingでは、ログの有効化、また Rancher Desktop 自体の初期化ができます.\n検証 Rancher Desktop 上で、実際にコンテナなどを動かして見ます.\nnerdctl の使用 nerdctlコマンドを使用して、nginx を起動してみます. namespace は未指定の場合、デフォルトでdefaultに配置されます.\nnginx を起動 1 2 3 4 5 6  $ ./.local/bin/nerdctl run -d -p 9999:80 nginx docker.io/library/nginx:latest: resolved |++++++++++++++++++++++++++++++++++++++| index-sha256:2834dc507516af02784808c5f48b7cbe38b8ed5d0f4837f16e78d00deb7e7767: done |++++++++++++++++++++++++++++++++++++++| ... elapsed: 7.2 s total: 54.1 M (7.5 MiB/s) 484e86556e00843200c97b5aa779ba81a9016796e23964e5a0cac27159de444e   コンテナの状態を確認 1 2 3  $ ./.local/bin/nerdctl ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 484e86556e00 docker.io/library/nginx:latest \u0026#34;/docker-entrypoint.…\u0026#34; 6 minutes ago Up 0.0.0.0:9999-\u0026gt;80/tcp nginx-484e8   namespace を確認 1 2 3 4 5  $ ./.local/bin/nerdctl namespace list NAME CONTAINERS IMAGES VOLUMES buildkit 0 0 0 default 1 1 0 k8s.io 22 16 0   namespace default のプロセスを確認 1 2 3  $ ./.local/bin/nerdctl --namespace default ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 484e86556e00 docker.io/library/nginx:latest \u0026#34;/docker-entrypoint.…\u0026#34; 11 minutes ago Up 0.0.0.0:9999-\u0026gt;80/tcp nginx-484e8   また、Rancher Desktop からもnamespace:defaultに nginx イメージを確認することができます.\n最後に、localhost:9999にアクセスして、nginx の起動を確認してみます.\nHelm の使用 Rancher Desktop では、起動時に Helm もインストールされるので、Helm を使って Kubernetes に Grafana をデプロイしてみます.\nHelm に Grafana のリポジトリを追加 1  $ ./.local/bin/helm repo add grafana https://grafana.github.io/helm-charts   Helm にリポジトリが追加されていることを確認 1 2 3  $ ./.local/bin/helm repo list NAME URL grafana https://grafana.github.io/helm-charts   追加した Grafana リポジトリからチャートを確認 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ ./.local/bin/helm search repo grafana NAME CHART VERSION APP VERSION DESCRIPTION grafana/grafana 6.21.1 8.3.4 The leading tool for querying and visualizing t... grafana/grafana-agent-operator 0.1.5 0.22.0 A Helm chart for Grafana Agent Operator grafana/enterprise-logs 2.0.0 v1.3.0 Grafana Enterprise Logs grafana/enterprise-metrics 1.7.3 v1.6.1 Grafana Enterprise Metrics grafana/fluent-bit 2.3.0 v2.1.0 Uses fluent-bit Loki go plugin for gathering lo... grafana/loki 2.9.1 v2.4.2 Loki: like Prometheus, but for logs. grafana/loki-canary 0.5.1 2.4.1 Helm chart for Grafana Loki Canary grafana/loki-distributed 0.42.0 2.4.2 Helm chart for Grafana Loki in microservices mode grafana/loki-simple-scalable 0.2.0 2.4.2 Helm chart for Grafana Loki in simple, scalable... grafana/loki-stack 2.5.1 v2.1.0 Loki: like Prometheus, but for logs. grafana/promtail 3.10.0 2.4.2 Promtail is an agent which ships the contents o... grafana/tempo 0.13.0 1.3.0 Grafana Tempo Single Binary Mode grafana/tempo-distributed 0.15.0 1.3.0 Grafana Tempo in MicroService mode grafana/tempo-vulture 0.2.0 1.3.0 Grafana Tempo Vulture - A tool to monitor Tempo...   Helm チャートをリリース 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  $ ./.local/bin/kubectl create namespace monitoring $ ./.local/bin/helm install grafana --namespace monitoring grafana/grafana W0128 03:37:33.477723 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.480386 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.538004 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0128 03:37:33.538201 218028 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ NAME: grafana LAST DEPLOYED: Fri Jan 28 03:37:32 2022 NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: 1. Get your \u0026#39;admin\u0026#39; user password by running: kubectl get secret --namespace monitoring grafana -o jsonpath=\u0026#34;{.data.admin-password}\u0026#34; | base64 --decode ; echo 2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster: grafana.monitoring.svc.cluster.local Get the Grafana URL to visit by running these commands in the same shell: export POD_NAME=$(kubectl get pods --namespace monitoring -l \u0026#34;app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana\u0026#34; -o jsonpath=\u0026#34;{.items[0].metadata.name}\u0026#34;) kubectl --namespace monitoring port-forward $POD_NAME 3000 3. Login with the password from step 1 and the username: admin ################################################################################# ###### WARNING: Persistence is disabled!!! You will lose your data when ##### ###### the Grafana pod is terminated. ##### #################################################################################   上記の手順に従って、正常に Grafana にログインすることができました.\n最後に、kubectlコマンドを使って Grafana が立ち上がっていることを確認します.\n1 2 3 4 5 6 7 8 9 10 11 12  $ ./.local/bin/kubectl get all --namespace monitoring NAME READY STATUS RESTARTS AGE pod/grafana-6b9d4f7f86-mwb4q 1/1 Running 0 15m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/grafana ClusterIP 10.43.218.65 \u0026lt;none\u0026gt; 80/TCP 15m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/grafana 1/1 1 1 15m NAME DESIRED CURRENT READY AGE replicaset.apps/grafana-6b9d4f7f86 1 1 1 15m   以上のように、Rancher Desktop を起動するだけでアプリケーションの開発やデプロイが簡単に行うことができました.\n所感 今回は、v1.0.0 がリリースされた Rancher Desktop を触ってみましたが、非常に完成度の高いツールでした. containerd、nerdctlを初めて触る方も Rancher Desktop は良い機会だと思います.\n昨年、Docker Desktop が有料化が大きなニュースとなり、それに伴い、密かに代替案として注目されていた Rancher Desktop ですが、 Docker Desktop から乗り換えたとしても遜色なく利用できるかと思います. 万が一、Docker のランタイムを使用したいと思えば、Rancher Desktop 上から切り替えれば良いので、大して手間は掛かりません.\nまた、Kubernetes のバージョンをスムーズに切り替えられるのも個人的には大きなメリットなのかなと思います.\nこれから、コンテナを利用する手段の 1 つとして、広く普及していく可能性は大いにあり得るので、今後の動向に注目していきたいと思います.\n","date":"2022-01-27T00:00:00Z","image":"https://example.com/p/mxlinux-%E3%81%A7-rancher-desktop-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99/featured-image_hua255d1196849d3759ae697794b4989fc_2680_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://example.com/p/mxlinux-%E3%81%A7-rancher-desktop-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99/","title":"MXLinux で Rancher Desktop を動かす"},{"content":"Google Authenticator の機種変更時の引き継ぎ方法について説明します.\nまた、個人的に推奨している Microsoft Authenticator についても解説します.\n概要 近年、セキュリティの強化として2 段階認証の導入が推奨され、多くの方が SMS 認証や Google Authenticator などの認証アプリケーションをスマートフォンなどにインストールしているかと思います.\nしかし、認証アプリは機種変更などをした際に正しい引き継ぎ手順を踏まなければ、認証アプリにログインできなくなります.それによって苦汁を舐めた人たちも多くいるのではないでしょうか.\nそのような事態にならないためにも、正しい手順を理解し、スムーズに引き継げるようにしましょう.\nそもそも 2 段階認証って？ 2 段階認証はその名の通り、「2 度の認証を行う」ことです. 従来の 1 つの認証方法を使うよりはるかにセキュアに管理する事ができます.\n2 段階認証には、様々な方法があります.\n SMS, メールなどを用いる場合  認証サーバなどで特定の文字列などが発行され、送信されます. ユーザはそれを画面上で入力します.     2 段階認証アプリケーションを用いる場合  アプリケーション上でワンタイムのセキュリティコードが自動的に生成され、そのコードを画面上に入力します.    ※ 2 段階認証アプリは別名、TOTP (Time-based One-Time Password) アプリとも呼ばれます.\n2 段階認証を扱う上での注意点 いくらセキュアな機能だとしても注意するべき点はいくつかあります.\n2 段階目の認証として最も利用されているのはスマートフォンだと思います. スマートフォンの電話番号宛に SMS が届き、そのコードを利用したり、キャリアメールアドレスに送られるコードを利用したりするため、スマートフォンの紛失・盗難時にログインできなくなります.\nこれは、ワンタイムパスワードを用いる場合も同じことが言えます.\nGoogle Authenticator を利用している場合は、スマートフォンにインストールして利用しているため、紛失・盗難時には同じくログインすることができません.\nまた、スマートフォンの機種を変更した場合も引き継ぎを正しく行っていなければアプリケーションをインストールしても復元することができません.\nこれらを回避する方法としては以下の通りです.\n 複数の認証方法を設定しておく  SMS + 2 段階認証アプリケーション 2 段階認証アプリケーション + メール etc\u0026hellip;   引き継ぎの際、2 段階認証の設定を無効化(解除)しておく  引き継ぎ方法 (Google Authenticator) Google Authenticator を新しいデバイスへ引き継ぐ方法について解説します.\n以前までは、アプリケーションに登録している 2 段階認証を全て無効化する必要がありましたが、現在は引き継ぐ前のデバイスでアカウント情報をエクスポートし、 それを新しいデバイスでインポートすることでアカウントを移行することができます.\nそれぞれのデバイスでの手順は以下の通りです.\niOS   移行前のデバイス\n Google Authenticator を起動 起動したアプリケーションの右上のメニューボタン...をタップし、「アカウントのエクスポート」を選択 エクスポート画面で、右下「続行」ボタンをタップ 指紋認証、FaceID、または端末に設定している PIN（パスコード）を入力して本人確認を実行 移行させるアカウントを選択して、「エクスポート」をタップ 移行用 QR コードが表示されたら準備完了    新しいデバイス\n Google Authenticator を起動し、「開始」をタップ 左下「既存のアカウントをインポートしますか？」をタップ 右下「QR コードをスキャン」をタップ エクスポート時に作成した移行用 QR コードを読み込む    Android   移行前のデバイス\n Google Authenticator を起動 起動したアプリケーションの右上のメニューボタン...をタップし、「アカウントの移行」を選択 エクスポート画面で、右下「アカウントのエクスポート」ボタンをタップ 本人確認を実行 「次へ」をタップ 移行用 QR コードが表示されたら準備完了    新しいデバイス\n Google Authenticator を起動し、「使ってみる」をタップ 左下「既存のアカウントをインポートしますか？」をタップ 右下「QR コードをスキャン」をタップ エクスポート時に作成した移行用 QR コードを読み込む    上記の手順を実行後、「インポート完了」と表示されれば引き継ぎは完了です.\nMicrosoft Authenticator の利用 上記では Google Authenticator を解説しましたが、私はMicrosoft Authenticatorを使用しています.\n理由としては以下の通りです.\n バックアップ機能が搭載されていない 登録されているアプリケーションを並び替えると UI が壊れる  同一アプリケーションが複数表示される (誤って消すと両方とも消える)   スマートフォン・アプリケーションでしか利用できない  非常にシンプルなのですが、UI が壊れるのも耐え難く、最大の理由としては「バックアップ機能が搭載されていない」という点です. 万が一、デバイスが起動しなくなった際の再設定などの手間を考えると、あまり使いやすいとは言えません.\n一方で、Microsoft Authenticator だと、Microsoft アカウントをアプリと同期することでバックアップが可能です. 詳しい方法に関しては、こちらを参照ください.\n※ iOS 版では iCloud でバックアップを行うため、iCloud のアカウントが必要となります.\nしかし、Microsoft Authenticator も Google Authenticator と同じく、スマートフォン・アプリケーションでしか利用できません. 「PC でも使用したい！」と言う方は、Twilio社のAuthyを使用することをおすすめします.\n※ Authy を利用する場合は、別途 Authy のアカウントを作成する必要があります.\nまとめ 今回は、2 段階認証の仕組みと、認証アプリケーションの引き継ぎ方法などについて解説しました.\n2 段階認証アプリケーションを使用することで、アカウントの情報をよりセキュアに管理することができる反面、きちんと管理する必要があります. 特に 2 段階認証設定後のバックアップコードの管理には十分、注意してください.\n実体が無いとは言え、重要な資産なので、この記事を参考に大切に保管しましょう.\n","date":"2021-10-04T00:00:00Z","image":"https://example.com/p/google-authenticator-%E3%81%8B%E3%82%89%E3%81%AE%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%8E%E6%96%B9%E6%B3%95/featured-image_hue5d9e6be829627395a8e9ef9ad7b7d16_204404_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://example.com/p/google-authenticator-%E3%81%8B%E3%82%89%E3%81%AE%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%8E%E6%96%B9%E6%B3%95/","title":"Google Authenticator からの引き継ぎ方法"},{"content":"個人で使用しているデバイスの詳細情報について説明します.\nMacbook Pro (13-inch, 2019)    項目 内容     OS macOS 12.2 21D49 x86_64   CPU Intel i7-8569U (8) @ 2.80GHz   GPU Intel Iris Plus Graphics 655   Memory 16 GB 2133 MHz LPDDR3   Terminal iTerm2   Terminal Font FiraCodeNerdFontComplete-Regular   Shell zsh 5.8    PC 使用している PC には、3 つの OS がインストールされています。\n共通 (Desktop)    項目 内容     Motherboard ROG STRIX H370-F GAMING (ASUSTeK COMPUTER INC.)   CPU Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz   GPU NVIDIA GeForce GTX 1060 6GB (MSI Co., Ltd.)   Memory DDR4-2666MHz 8×4GB (Corsair Inc.)   Storage(OS) Crucial MX500 500×2GB (Micron Technology, Inc.)   Storage Western Digital Blue: 6TB, Green: 3×2TB (Western Digital Corporation)    WindowsOS    項目 内容     OS Windows 11 Pro (64bit)   Terminal Windows Console   Terminal Font FiraCode   Shell PowerShell v7.1.4    Linux (1)    項目 内容     OS Manjaro Linux x86_64   Terminal xfce4-terminal   Terminal Font FiraCode Nerd Font   Shell zsh 5.8    Linux (2)    項目 内容     OS MX x86_64   Terminal xfce4-terminal   Terminal Font Lilex Nerd Font Mono Medium   Shell zsh 5.8   ","date":"2021-09-28T00:00:00Z","image":"https://example.com/p/%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/featured-image_hu73aa009c4655c053a851e705e92c6897_259024_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://example.com/p/%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","title":"使用しているデバイスについて"}]